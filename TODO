Things that must be done before first beta release:
===================================================

+ fix system timer (200 Hz) - the system time slows down under heavy load now.

+ fix Makefile (dependencies fooled due to "obj/" folder)

+ system wide object with user settings that will include bx_options from ata.cpp.

+ CMOS (NVRAM) settings stored on disk

+ mouse pointer must be sync'ed with the host mouse (in X-Windows)

+ aranym HW registers - define a structure, use it for FastRAM.PRG (to find out
  the correct size of FastRAM) and for StandaFsEditor.PRG (will edit CONFIG.SYS
  automagically and will add there the GEMDOS drives that were attached in aranym)
  The structure address will be obtained by calling an undefined instruction.
  TOS will hold it in a CookieJar ARAx.

- printing - definitely a must. Either by YAMAHA emulation or directly
  by hooking into TOS xconout. Anyone having a copy of TOS ROM that was able
  to print chars on console?

- rewrite all HW modules to make use of BASE_IO::handle_read/write()

- in fdc.cpp: replace HWget_b() and HWput_b() with something more appropriate
              for inter-module communication

- in acia.cpp: get_byte_direct() and put_byte_direct() are another example of code
               that should be replaced by something better (more descriptive)

- in hardware.cpp: HWget_l/HWput_l should not have the special case for HW_IDE

+ replace timer thread with SDL_getTimerMilis() in uae_cpu inner loop. The advantages
  are mainly exact 200 Hz (instead of approx 100 Hz we have currently) and
  screen updating in main thread (thus no inter-thread collisions)

- enable SWACCEL and HWBLITS of Blitter - either in ./configure or make it
  configurable in runtime (depends on runtime config GUI stuff Milan made)

- move ROM file reading back to main.cpp, perhaps even with 040 patching routine so 
  aranym could use pure TOS 4.04

- find out how the GUI config stuff by Milan works

- find out how the new Milan debugger works

- improve the keyboard emulation - make the keyboard layout editable (for national keyboards),
  well define and DOCUMENT keyboard combos for quitting, mounting floppy/cdrom, screen shot
  grabbing, debugger invoking, GUI config entering and others.

- document the way the aranym works - especially the hardware emulation (Hackers Guide)

- document the command line switches, keyboard combos and write Users Guide.

- create several disk images with preinstalled _free_ software:
  16 MB - just harddisk driver (AHDI or CBHD) and a few AUTO/ACC/CPX tools
          (WinX, Clocky, calculator as ACC, perhaps screen saver etc).
          Free desktop replacement would be nice.
          Include also free screen resolution enhancer (is BlowUP free already?)

  128 MB - proper setup including some basic applications. XBOOT-like selection
           would be great. Try to include some basic FreeMiNT setup.

  1 GB - basically a copy of the 128 MB disk image but with more free space for
         people to start working with it immediately.

The goal for the first beta is to get functional Atari/TOS machine replacement
fully usable for regular GEM users.

Estimated amount of work for first beta release: unknown

Things for 1.0 release:
=======================

- Networking for MiNTNet (like in vmware)

+ mouse pointer shared between X-Windows and aranym (like in vmware)

+ fVDI working (TOS+aranym drivers)

- sound output using GSXB library

The goal for version 1.0 is to have real TOS/MiNT compatible machine usable by
all Atari power users/MiNTers. Key elements are TCP/IP networking, large
screen resolution in high color/true color, fast CPU/FPU and plenty of RAM.

Estimated time for 1.0 release: summer/fall 2001.

Things for 2.0 release:
=======================

- MMU040 (MiNT with memory protection, Linux)

- configuration in GUI for X-Windows (GNOME/KDE)

- perhaps port of aranym to Windows

- Yamaha and DMA sound, DSP emulation etc.

- serial port, parallel port, joysticks etc.

The goal for 2.0 is total Atari machine replacement usable by every Atari BFU.
It should be able to boot Linux-m68k to prove 100% hardware compatibility.

Estimated time for 2.0 release: depends on number of attracted programmers.
Either never (due to lack of interest) or rather soon after 1.0 release.
