/* Generated by proto-gen.pl from /usr/local/include/GL/gl.h */

	 void  nfglClearIndex(Uint32 ctx, GLfloat c );
	 void  nfglClearColor(Uint32 ctx, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
	 void  nfglClear(Uint32 ctx, GLbitfield mask );
	 void  nfglIndexMask(Uint32 ctx, GLuint mask );
	 void  nfglColorMask(Uint32 ctx, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
	 void  nfglAlphaFunc(Uint32 ctx, GLenum func, GLclampf ref );
	 void  nfglBlendFunc(Uint32 ctx, GLenum sfactor, GLenum dfactor );
	 void  nfglLogicOp(Uint32 ctx, GLenum opcode );
	 void  nfglCullFace(Uint32 ctx, GLenum mode );
	 void  nfglFrontFace(Uint32 ctx, GLenum mode );
	 void  nfglPointSize(Uint32 ctx, GLfloat size );
	 void  nfglLineWidth(Uint32 ctx, GLfloat width );
	 void  nfglLineStipple(Uint32 ctx, GLint factor, GLushort pattern );
	 void  nfglPolygonMode(Uint32 ctx, GLenum face, GLenum mode );
	 void  nfglPolygonOffset(Uint32 ctx, GLfloat factor, GLfloat units );
	 void  nfglPolygonStipple(Uint32 ctx, const GLubyte *mask );
	 void  nfglGetPolygonStipple(Uint32 ctx, GLubyte *mask );
	 void  nfglEdgeFlag(Uint32 ctx, GLboolean flag );
	 void  nfglEdgeFlagv(Uint32 ctx, const GLboolean *flag );
	 void  nfglScissor(Uint32 ctx, GLint x, GLint y, GLsizei width, GLsizei height);
	 void  nfglClipPlane(Uint32 ctx, GLenum plane, const GLdouble *equation );
	 void  nfglGetClipPlane(Uint32 ctx, GLenum plane, GLdouble *equation );
	 void  nfglDrawBuffer(Uint32 ctx, GLenum mode );
	 void  nfglReadBuffer(Uint32 ctx, GLenum mode );
	 void  nfglEnable(Uint32 ctx, GLenum cap );
	 void  nfglDisable(Uint32 ctx, GLenum cap );
	 GLboolean  nfglIsEnabled(Uint32 ctx, GLenum cap );
	 void  nfglEnableClientState(Uint32 ctx, GLenum cap );
	 void  nfglDisableClientState(Uint32 ctx, GLenum cap );
	 void  nfglGetBooleanv(Uint32 ctx, GLenum pname, GLboolean *params );
	 void  nfglGetDoublev(Uint32 ctx, GLenum pname, GLdouble *params );
	 void  nfglGetFloatv(Uint32 ctx, GLenum pname, GLfloat *params );
	 void  nfglGetIntegerv(Uint32 ctx, GLenum pname, GLint *params );
	 void  nfglPushAttrib(Uint32 ctx, GLbitfield mask );
	 void  nfglPopAttrib(Uint32 ctx);
	 void  nfglPushClientAttrib(Uint32 ctx, GLbitfield mask );
	 void  nfglPopClientAttrib(Uint32 ctx);
	 GLint  nfglRenderMode(Uint32 ctx, GLenum mode );
	 GLenum  nfglGetError(Uint32 ctx);
	 const GLubyte*  nfglGetString(Uint32 ctx, GLenum name );
	 void  nfglFinish(Uint32 ctx);
	 void  nfglFlush(Uint32 ctx);
	 void  nfglHint(Uint32 ctx, GLenum target, GLenum mode );
	 void  nfglClearDepth(Uint32 ctx, GLclampd depth );
	 void  nfglDepthFunc(Uint32 ctx, GLenum func );
	 void  nfglDepthMask(Uint32 ctx, GLboolean flag );
	 void  nfglDepthRange(Uint32 ctx, GLclampd near_val, GLclampd far_val );
	 void  nfglClearAccum(Uint32 ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
	 void  nfglAccum(Uint32 ctx, GLenum op, GLfloat value );
	 void  nfglMatrixMode(Uint32 ctx, GLenum mode );
	 void  nfglOrtho(Uint32 ctx, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
	 void  nfglFrustum(Uint32 ctx, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
	 void  nfglViewport(Uint32 ctx, GLint x, GLint y, GLsizei width, GLsizei height );
	 void  nfglPushMatrix(Uint32 ctx);
	 void  nfglPopMatrix(Uint32 ctx);
	 void  nfglLoadIdentity(Uint32 ctx);
	 void  nfglLoadMatrixd(Uint32 ctx, const GLdouble *m );
	 void  nfglLoadMatrixf(Uint32 ctx, const GLfloat *m );
	 void  nfglMultMatrixd(Uint32 ctx, const GLdouble *m );
	 void  nfglMultMatrixf(Uint32 ctx, const GLfloat *m );
	 void  nfglRotated(Uint32 ctx, GLdouble annfgle, GLdouble x, GLdouble y, GLdouble z );
	 void  nfglRotatef(Uint32 ctx, GLfloat annfgle, GLfloat x, GLfloat y, GLfloat z );
	 void  nfglScaled(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z );
	 void  nfglScalef(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z );
	 void  nfglTranslated(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z );
	 void  nfglTranslatef(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z );
	 GLboolean  nfglIsList(Uint32 ctx, GLuint list );
	 void  nfglDeleteLists(Uint32 ctx, GLuint list, GLsizei range );
	 GLuint  nfglGenLists(Uint32 ctx, GLsizei range );
	 void  nfglNewList(Uint32 ctx, GLuint list, GLenum mode );
	 void  nfglEndList(Uint32 ctx);
	 void  nfglCallList(Uint32 ctx, GLuint list );
	 void  nfglCallLists(Uint32 ctx, GLsizei n, GLenum type, const GLvoid *lists );
	 void  nfglListBase(Uint32 ctx, GLuint base );
	 void  nfglBegin(Uint32 ctx, GLenum mode );
	 void  nfglEnd(Uint32 ctx);
	 void  nfglVertex2d(Uint32 ctx, GLdouble x, GLdouble y );
	 void  nfglVertex2f(Uint32 ctx, GLfloat x, GLfloat y );
	 void  nfglVertex2i(Uint32 ctx, GLint x, GLint y );
	 void  nfglVertex2s(Uint32 ctx, GLshort x, GLshort y );
	 void  nfglVertex3d(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z );
	 void  nfglVertex3f(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z );
	 void  nfglVertex3i(Uint32 ctx, GLint x, GLint y, GLint z );
	 void  nfglVertex3s(Uint32 ctx, GLshort x, GLshort y, GLshort z );
	 void  nfglVertex4d(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
	 void  nfglVertex4f(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
	 void  nfglVertex4i(Uint32 ctx, GLint x, GLint y, GLint z, GLint w );
	 void  nfglVertex4s(Uint32 ctx, GLshort x, GLshort y, GLshort z, GLshort w );
	 void  nfglVertex2dv(Uint32 ctx, const GLdouble *v );
	 void  nfglVertex2fv(Uint32 ctx, const GLfloat *v );
	 void  nfglVertex2iv(Uint32 ctx, const GLint *v );
	 void  nfglVertex2sv(Uint32 ctx, const GLshort *v );
	 void  nfglVertex3dv(Uint32 ctx, const GLdouble *v );
	 void  nfglVertex3fv(Uint32 ctx, const GLfloat *v );
	 void  nfglVertex3iv(Uint32 ctx, const GLint *v );
	 void  nfglVertex3sv(Uint32 ctx, const GLshort *v );
	 void  nfglVertex4dv(Uint32 ctx, const GLdouble *v );
	 void  nfglVertex4fv(Uint32 ctx, const GLfloat *v );
	 void  nfglVertex4iv(Uint32 ctx, const GLint *v );
	 void  nfglVertex4sv(Uint32 ctx, const GLshort *v );
	 void  nfglNormal3b(Uint32 ctx, GLbyte nx, GLbyte ny, GLbyte nz );
	 void  nfglNormal3d(Uint32 ctx, GLdouble nx, GLdouble ny, GLdouble nz );
	 void  nfglNormal3f(Uint32 ctx, GLfloat nx, GLfloat ny, GLfloat nz );
	 void  nfglNormal3i(Uint32 ctx, GLint nx, GLint ny, GLint nz );
	 void  nfglNormal3s(Uint32 ctx, GLshort nx, GLshort ny, GLshort nz );
	 void  nfglNormal3bv(Uint32 ctx, const GLbyte *v );
	 void  nfglNormal3dv(Uint32 ctx, const GLdouble *v );
	 void  nfglNormal3fv(Uint32 ctx, const GLfloat *v );
	 void  nfglNormal3iv(Uint32 ctx, const GLint *v );
	 void  nfglNormal3sv(Uint32 ctx, const GLshort *v );
	 void  nfglIndexd(Uint32 ctx, GLdouble c );
	 void  nfglIndexf(Uint32 ctx, GLfloat c );
	 void  nfglIndexi(Uint32 ctx, GLint c );
	 void  nfglIndexs(Uint32 ctx, GLshort c );
	 void  nfglIndexub(Uint32 ctx, GLubyte c );
	 void  nfglIndexdv(Uint32 ctx, const GLdouble *c );
	 void  nfglIndexfv(Uint32 ctx, const GLfloat *c );
	 void  nfglIndexiv(Uint32 ctx, const GLint *c );
	 void  nfglIndexsv(Uint32 ctx, const GLshort *c );
	 void  nfglIndexubv(Uint32 ctx, const GLubyte *c );
	 void  nfglColor3b(Uint32 ctx, GLbyte red, GLbyte green, GLbyte blue );
	 void  nfglColor3d(Uint32 ctx, GLdouble red, GLdouble green, GLdouble blue );
	 void  nfglColor3f(Uint32 ctx, GLfloat red, GLfloat green, GLfloat blue );
	 void  nfglColor3i(Uint32 ctx, GLint red, GLint green, GLint blue );
	 void  nfglColor3s(Uint32 ctx, GLshort red, GLshort green, GLshort blue );
	 void  nfglColor3ub(Uint32 ctx, GLubyte red, GLubyte green, GLubyte blue );
	 void  nfglColor3ui(Uint32 ctx, GLuint red, GLuint green, GLuint blue );
	 void  nfglColor3us(Uint32 ctx, GLushort red, GLushort green, GLushort blue );
	 void  nfglColor4b(Uint32 ctx, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
	 void  nfglColor4d(Uint32 ctx, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
	 void  nfglColor4f(Uint32 ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
	 void  nfglColor4i(Uint32 ctx, GLint red, GLint green, GLint blue, GLint alpha );
	 void  nfglColor4s(Uint32 ctx, GLshort red, GLshort green, GLshort blue, GLshort alpha );
	 void  nfglColor4ub(Uint32 ctx, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
	 void  nfglColor4ui(Uint32 ctx, GLuint red, GLuint green, GLuint blue, GLuint alpha );
	 void  nfglColor4us(Uint32 ctx, GLushort red, GLushort green, GLushort blue, GLushort alpha );
	 void  nfglColor3bv(Uint32 ctx, const GLbyte *v );
	 void  nfglColor3dv(Uint32 ctx, const GLdouble *v );
	 void  nfglColor3fv(Uint32 ctx, const GLfloat *v );
	 void  nfglColor3iv(Uint32 ctx, const GLint *v );
	 void  nfglColor3sv(Uint32 ctx, const GLshort *v );
	 void  nfglColor3ubv(Uint32 ctx, const GLubyte *v );
	 void  nfglColor3uiv(Uint32 ctx, const GLuint *v );
	 void  nfglColor3usv(Uint32 ctx, const GLushort *v );
	 void  nfglColor4bv(Uint32 ctx, const GLbyte *v );
	 void  nfglColor4dv(Uint32 ctx, const GLdouble *v );
	 void  nfglColor4fv(Uint32 ctx, const GLfloat *v );
	 void  nfglColor4iv(Uint32 ctx, const GLint *v );
	 void  nfglColor4sv(Uint32 ctx, const GLshort *v );
	 void  nfglColor4ubv(Uint32 ctx, const GLubyte *v );
	 void  nfglColor4uiv(Uint32 ctx, const GLuint *v );
	 void  nfglColor4usv(Uint32 ctx, const GLushort *v );
	 void  nfglTexCoord1d(Uint32 ctx, GLdouble s );
	 void  nfglTexCoord1f(Uint32 ctx, GLfloat s );
	 void  nfglTexCoord1i(Uint32 ctx, GLint s );
	 void  nfglTexCoord1s(Uint32 ctx, GLshort s );
	 void  nfglTexCoord2d(Uint32 ctx, GLdouble s, GLdouble t );
	 void  nfglTexCoord2f(Uint32 ctx, GLfloat s, GLfloat t );
	 void  nfglTexCoord2i(Uint32 ctx, GLint s, GLint t );
	 void  nfglTexCoord2s(Uint32 ctx, GLshort s, GLshort t );
	 void  nfglTexCoord3d(Uint32 ctx, GLdouble s, GLdouble t, GLdouble r );
	 void  nfglTexCoord3f(Uint32 ctx, GLfloat s, GLfloat t, GLfloat r );
	 void  nfglTexCoord3i(Uint32 ctx, GLint s, GLint t, GLint r );
	 void  nfglTexCoord3s(Uint32 ctx, GLshort s, GLshort t, GLshort r );
	 void  nfglTexCoord4d(Uint32 ctx, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
	 void  nfglTexCoord4f(Uint32 ctx, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
	 void  nfglTexCoord4i(Uint32 ctx, GLint s, GLint t, GLint r, GLint q );
	 void  nfglTexCoord4s(Uint32 ctx, GLshort s, GLshort t, GLshort r, GLshort q );
	 void  nfglTexCoord1dv(Uint32 ctx, const GLdouble *v );
	 void  nfglTexCoord1fv(Uint32 ctx, const GLfloat *v );
	 void  nfglTexCoord1iv(Uint32 ctx, const GLint *v );
	 void  nfglTexCoord1sv(Uint32 ctx, const GLshort *v );
	 void  nfglTexCoord2dv(Uint32 ctx, const GLdouble *v );
	 void  nfglTexCoord2fv(Uint32 ctx, const GLfloat *v );
	 void  nfglTexCoord2iv(Uint32 ctx, const GLint *v );
	 void  nfglTexCoord2sv(Uint32 ctx, const GLshort *v );
	 void  nfglTexCoord3dv(Uint32 ctx, const GLdouble *v );
	 void  nfglTexCoord3fv(Uint32 ctx, const GLfloat *v );
	 void  nfglTexCoord3iv(Uint32 ctx, const GLint *v );
	 void  nfglTexCoord3sv(Uint32 ctx, const GLshort *v );
	 void  nfglTexCoord4dv(Uint32 ctx, const GLdouble *v );
	 void  nfglTexCoord4fv(Uint32 ctx, const GLfloat *v );
	 void  nfglTexCoord4iv(Uint32 ctx, const GLint *v );
	 void  nfglTexCoord4sv(Uint32 ctx, const GLshort *v );
	 void  nfglRasterPos2d(Uint32 ctx, GLdouble x, GLdouble y );
	 void  nfglRasterPos2f(Uint32 ctx, GLfloat x, GLfloat y );
	 void  nfglRasterPos2i(Uint32 ctx, GLint x, GLint y );
	 void  nfglRasterPos2s(Uint32 ctx, GLshort x, GLshort y );
	 void  nfglRasterPos3d(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z );
	 void  nfglRasterPos3f(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z );
	 void  nfglRasterPos3i(Uint32 ctx, GLint x, GLint y, GLint z );
	 void  nfglRasterPos3s(Uint32 ctx, GLshort x, GLshort y, GLshort z );
	 void  nfglRasterPos4d(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
	 void  nfglRasterPos4f(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
	 void  nfglRasterPos4i(Uint32 ctx, GLint x, GLint y, GLint z, GLint w );
	 void  nfglRasterPos4s(Uint32 ctx, GLshort x, GLshort y, GLshort z, GLshort w );
	 void  nfglRasterPos2dv(Uint32 ctx, const GLdouble *v );
	 void  nfglRasterPos2fv(Uint32 ctx, const GLfloat *v );
	 void  nfglRasterPos2iv(Uint32 ctx, const GLint *v );
	 void  nfglRasterPos2sv(Uint32 ctx, const GLshort *v );
	 void  nfglRasterPos3dv(Uint32 ctx, const GLdouble *v );
	 void  nfglRasterPos3fv(Uint32 ctx, const GLfloat *v );
	 void  nfglRasterPos3iv(Uint32 ctx, const GLint *v );
	 void  nfglRasterPos3sv(Uint32 ctx, const GLshort *v );
	 void  nfglRasterPos4dv(Uint32 ctx, const GLdouble *v );
	 void  nfglRasterPos4fv(Uint32 ctx, const GLfloat *v );
	 void  nfglRasterPos4iv(Uint32 ctx, const GLint *v );
	 void  nfglRasterPos4sv(Uint32 ctx, const GLshort *v );
	 void  nfglRectd(Uint32 ctx, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
	 void  nfglRectf(Uint32 ctx, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
	 void  nfglRecti(Uint32 ctx, GLint x1, GLint y1, GLint x2, GLint y2 );
	 void  nfglRects(Uint32 ctx, GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
	 void  nfglRectdv(Uint32 ctx, const GLdouble *v1, const GLdouble *v2 );
	 void  nfglRectfv(Uint32 ctx, const GLfloat *v1, const GLfloat *v2 );
	 void  nfglRectiv(Uint32 ctx, const GLint *v1, const GLint *v2 );
	 void  nfglRectsv(Uint32 ctx, const GLshort *v1, const GLshort *v2 );
	 void  nfglVertexPointer(Uint32 ctx, GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  nfglNormalPointer(Uint32 ctx, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  nfglColorPointer(Uint32 ctx, GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  nfglIndexPointer(Uint32 ctx, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  nfglTexCoordPointer(Uint32 ctx, GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  nfglEdgeFlagPointer(Uint32 ctx, GLsizei stride, const GLvoid *ptr );
	 void  nfglGetPointerv(Uint32 ctx, GLenum pname, GLvoid **params );
	 void  nfglArrayElement(Uint32 ctx, GLint i );
	 void  nfglDrawArrays(Uint32 ctx, GLenum mode, GLint first, GLsizei count );
	 void  nfglDrawElements(Uint32 ctx, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices );
	 void  nfglInterleavedArrays(Uint32 ctx, GLenum format, GLsizei stride, const GLvoid *pointer );
	 void  nfglShadeModel(Uint32 ctx, GLenum mode );
	 void  nfglLightf(Uint32 ctx, GLenum light, GLenum pname, GLfloat param );
	 void  nfglLighti(Uint32 ctx, GLenum light, GLenum pname, GLint param );
	 void  nfglLightfv(Uint32 ctx, GLenum light, GLenum pname, const GLfloat *params );
	 void  nfglLightiv(Uint32 ctx, GLenum light, GLenum pname, const GLint *params );
	 void  nfglGetLightfv(Uint32 ctx, GLenum light, GLenum pname, GLfloat *params );
	 void  nfglGetLightiv(Uint32 ctx, GLenum light, GLenum pname, GLint *params );
	 void  nfglLightModelf(Uint32 ctx, GLenum pname, GLfloat param );
	 void  nfglLightModeli(Uint32 ctx, GLenum pname, GLint param );
	 void  nfglLightModelfv(Uint32 ctx, GLenum pname, const GLfloat *params );
	 void  nfglLightModeliv(Uint32 ctx, GLenum pname, const GLint *params );
	 void  nfglMaterialf(Uint32 ctx, GLenum face, GLenum pname, GLfloat param );
	 void  nfglMateriali(Uint32 ctx, GLenum face, GLenum pname, GLint param );
	 void  nfglMaterialfv(Uint32 ctx, GLenum face, GLenum pname, const GLfloat *params );
	 void  nfglMaterialiv(Uint32 ctx, GLenum face, GLenum pname, const GLint *params );
	 void  nfglGetMaterialfv(Uint32 ctx, GLenum face, GLenum pname, GLfloat *params );
	 void  nfglGetMaterialiv(Uint32 ctx, GLenum face, GLenum pname, GLint *params );
	 void  nfglColorMaterial(Uint32 ctx, GLenum face, GLenum mode );
	 void  nfglPixelZoom(Uint32 ctx, GLfloat xfactor, GLfloat yfactor );
	 void  nfglPixelStoref(Uint32 ctx, GLenum pname, GLfloat param );
	 void  nfglPixelStorei(Uint32 ctx, GLenum pname, GLint param );
	 void  nfglPixelTransferf(Uint32 ctx, GLenum pname, GLfloat param );
	 void  nfglPixelTransferi(Uint32 ctx, GLenum pname, GLint param );
	 void  nfglPixelMapfv(Uint32 ctx, GLenum map, GLsizei mapsize, const GLfloat *values );
	 void  nfglPixelMapuiv(Uint32 ctx, GLenum map, GLsizei mapsize, const GLuint *values );
	 void  nfglPixelMapusv(Uint32 ctx, GLenum map, GLsizei mapsize, const GLushort *values );
	 void  nfglGetPixelMapfv(Uint32 ctx, GLenum map, GLfloat *values );
	 void  nfglGetPixelMapuiv(Uint32 ctx, GLenum map, GLuint *values );
	 void  nfglGetPixelMapusv(Uint32 ctx, GLenum map, GLushort *values );
	 void  nfglBitmap(Uint32 ctx, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap );
	 void  nfglReadPixels(Uint32 ctx, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels );
	 void  nfglDrawPixels(Uint32 ctx, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglCopyPixels(Uint32 ctx, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
	 void  nfglStencilFunc(Uint32 ctx, GLenum func, GLint ref, GLuint mask );
	 void  nfglStencilMask(Uint32 ctx, GLuint mask );
	 void  nfglStencilOp(Uint32 ctx, GLenum fail, GLenum zfail, GLenum zpass );
	 void  nfglClearStencil(Uint32 ctx, GLint s );
	 void  nfglTexGend(Uint32 ctx, GLenum coord, GLenum pname, GLdouble param );
	 void  nfglTexGenf(Uint32 ctx, GLenum coord, GLenum pname, GLfloat param );
	 void  nfglTexGeni(Uint32 ctx, GLenum coord, GLenum pname, GLint param );
	 void  nfglTexGendv(Uint32 ctx, GLenum coord, GLenum pname, const GLdouble *params );
	 void  nfglTexGenfv(Uint32 ctx, GLenum coord, GLenum pname, const GLfloat *params );
	 void  nfglTexGeniv(Uint32 ctx, GLenum coord, GLenum pname, const GLint *params );
	 void  nfglGetTexGendv(Uint32 ctx, GLenum coord, GLenum pname, GLdouble *params );
	 void  nfglGetTexGenfv(Uint32 ctx, GLenum coord, GLenum pname, GLfloat *params );
	 void  nfglGetTexGeniv(Uint32 ctx, GLenum coord, GLenum pname, GLint *params );
	 void  nfglTexEnvf(Uint32 ctx, GLenum target, GLenum pname, GLfloat param );
	 void  nfglTexEnvi(Uint32 ctx, GLenum target, GLenum pname, GLint param );
	 void  nfglTexEnvfv(Uint32 ctx, GLenum target, GLenum pname, const GLfloat *params );
	 void  nfglTexEnviv(Uint32 ctx, GLenum target, GLenum pname, const GLint *params );
	 void  nfglGetTexEnvfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params );
	 void  nfglGetTexEnviv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  nfglTexParameterf(Uint32 ctx, GLenum target, GLenum pname, GLfloat param );
	 void  nfglTexParameteri(Uint32 ctx, GLenum target, GLenum pname, GLint param );
	 void  nfglTexParameterfv(Uint32 ctx, GLenum target, GLenum pname, const GLfloat *params );
	 void  nfglTexParameteriv(Uint32 ctx, GLenum target, GLenum pname, const GLint *params );
	 void  nfglGetTexParameterfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params);
	 void  nfglGetTexParameteriv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  nfglGetTexLevelParameterfv(Uint32 ctx, GLenum target, GLint level, GLenum pname, GLfloat *params );
	 void  nfglGetTexLevelParameteriv(Uint32 ctx, GLenum target, GLint level, GLenum pname, GLint *params );
	 void  nfglTexImage1D(Uint32 ctx, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglTexImage2D(Uint32 ctx, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglGetTexImage(Uint32 ctx, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels );
	 void  nfglGenTextures(Uint32 ctx, GLsizei n, GLuint *textures );
	 void  nfglDeleteTextures(Uint32 ctx, GLsizei n, const GLuint *textures);
	 void  nfglBindTexture(Uint32 ctx, GLenum target, GLuint texture );
	 void  nfglPrioritizeTextures(Uint32 ctx, GLsizei n, const GLuint *textures, const GLclampf *priorities );
	 GLboolean  nfglAreTexturesResident(Uint32 ctx, GLsizei n, const GLuint *textures, GLboolean *residences );
	 GLboolean  nfglIsTexture(Uint32 ctx, GLuint texture );
	 void  nfglTexSubImage1D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglTexSubImage2D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglCopyTexImage1D(Uint32 ctx, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
	 void  nfglCopyTexImage2D(Uint32 ctx, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
	 void  nfglCopyTexSubImage1D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
	 void  nfglCopyTexSubImage2D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
	 void  nfglMap1d(Uint32 ctx, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
	 void  nfglMap1f(Uint32 ctx, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
	 void  nfglMap2d(Uint32 ctx, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
	 void  nfglMap2f(Uint32 ctx, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
	 void  nfglGetMapdv(Uint32 ctx, GLenum target, GLenum query, GLdouble *v );
	 void  nfglGetMapfv(Uint32 ctx, GLenum target, GLenum query, GLfloat *v );
	 void  nfglGetMapiv(Uint32 ctx, GLenum target, GLenum query, GLint *v );
	 void  nfglEvalCoord1d(Uint32 ctx, GLdouble u );
	 void  nfglEvalCoord1f(Uint32 ctx, GLfloat u );
	 void  nfglEvalCoord1dv(Uint32 ctx, const GLdouble *u );
	 void  nfglEvalCoord1fv(Uint32 ctx, const GLfloat *u );
	 void  nfglEvalCoord2d(Uint32 ctx, GLdouble u, GLdouble v );
	 void  nfglEvalCoord2f(Uint32 ctx, GLfloat u, GLfloat v );
	 void  nfglEvalCoord2dv(Uint32 ctx, const GLdouble *u );
	 void  nfglEvalCoord2fv(Uint32 ctx, const GLfloat *u );
	 void  nfglMapGrid1d(Uint32 ctx, GLint un, GLdouble u1, GLdouble u2 );
	 void  nfglMapGrid1f(Uint32 ctx, GLint un, GLfloat u1, GLfloat u2 );
	 void  nfglMapGrid2d(Uint32 ctx, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
	 void  nfglMapGrid2f(Uint32 ctx, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
	 void  nfglEvalPoint1(Uint32 ctx, GLint i );
	 void  nfglEvalPoint2(Uint32 ctx, GLint i, GLint j );
	 void  nfglEvalMesh1(Uint32 ctx, GLenum mode, GLint i1, GLint i2 );
	 void  nfglEvalMesh2(Uint32 ctx, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
	 void  nfglFogf(Uint32 ctx, GLenum pname, GLfloat param );
	 void  nfglFogi(Uint32 ctx, GLenum pname, GLint param );
	 void  nfglFogfv(Uint32 ctx, GLenum pname, const GLfloat *params );
	 void  nfglFogiv(Uint32 ctx, GLenum pname, const GLint *params );
	 void  nfglFeedbackBuffer(Uint32 ctx, GLsizei size, GLenum type, GLfloat *buffer );
	 void  nfglPassThrough(Uint32 ctx, GLfloat token );
	 void  nfglSelectBuffer(Uint32 ctx, GLsizei size, GLuint *buffer );
	 void  nfglInitNames(Uint32 ctx);
	 void  nfglLoadName(Uint32 ctx, GLuint name );
	 void  nfglPushName(Uint32 ctx, GLuint name );
	 void  nfglPopName(Uint32 ctx);
/*
	 void  nfglDrawRangeElements(Uint32 ctx, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices );
	 void  nfglTexImage3D(Uint32 ctx, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	 void  nfglTexSubImage3D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
	 void  nfglCopyTexSubImage3D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
	 void  nfglColorTable(Uint32 ctx, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table );
	 void  nfglColorSubTable(Uint32 ctx, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data );
	 void  nfglColorTableParameteriv(Uint32 ctx,GLenum target, GLenum pname, const GLint *params);
	 void  nfglColorTableParameterfv(Uint32 ctx,GLenum target, GLenum pname, const GLfloat *params);
	 void  nfglCopyColorSubTable(Uint32 ctx, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
	 void  nfglCopyColorTable(Uint32 ctx, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
	 void  nfglGetColorTable(Uint32 ctx, GLenum target, GLenum format, GLenum type, GLvoid *table );
	 void  nfglGetColorTableParameterfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params );
	 void  nfglGetColorTableParameteriv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  nfglBlendEquation(Uint32 ctx, GLenum mode );
	 void  nfglBlendColor(Uint32 ctx, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
	 void  nfglHistogram(Uint32 ctx, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
	 void  nfglResetHistogram(Uint32 ctx, GLenum target );
	 void  nfglGetHistogram(Uint32 ctx, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values );
	 void  nfglGetHistogramParameterfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params );
	 void  nfglGetHistogramParameteriv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  nfglMinmax(Uint32 ctx, GLenum target, GLenum internalformat, GLboolean sink );
	 void  nfglResetMinmax(Uint32 ctx, GLenum target );
	 void  nfglGetMinmax(Uint32 ctx, GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values );
	 void  nfglGetMinmaxParameterfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params );
	 void  nfglGetMinmaxParameteriv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  nfglConvolutionFilter1D(Uint32 ctx, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image );
	 void  nfglConvolutionFilter2D(Uint32 ctx, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image );
	 void  nfglConvolutionParameterf(Uint32 ctx, GLenum target, GLenum pname, GLfloat params );
	 void  nfglConvolutionParameterfv(Uint32 ctx, GLenum target, GLenum pname, const GLfloat *params );
	 void  nfglConvolutionParameteri(Uint32 ctx, GLenum target, GLenum pname, GLint params );
	 void  nfglConvolutionParameteriv(Uint32 ctx, GLenum target, GLenum pname, const GLint *params );
	 void  nfglCopyConvolutionFilter1D(Uint32 ctx, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
	 void  nfglCopyConvolutionFilter2D(Uint32 ctx, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
	 void  nfglGetConvolutionFilter(Uint32 ctx, GLenum target, GLenum format, GLenum type, GLvoid *image );
	 void  nfglGetConvolutionParameterfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params );
	 void  nfglGetConvolutionParameteriv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  nfglSeparableFilter2D(Uint32 ctx, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column );
	 void  nfglGetSeparableFilter(Uint32 ctx, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span );
	 void  nfglActiveTexture(Uint32 ctx, GLenum texture );
	 void  nfglClientActiveTexture(Uint32 ctx, GLenum texture );
	 void  nfglCompressedTexImage1D(Uint32 ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data );
	 void  nfglCompressedTexImage2D(Uint32 ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data );
	 void  nfglCompressedTexImage3D(Uint32 ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data );
	 void  nfglCompressedTexSubImage1D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data );
	 void  nfglCompressedTexSubImage2D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data );
	 void  nfglCompressedTexSubImage3D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data );
	 void  nfglGetCompressedTexImage(Uint32 ctx, GLenum target, GLint lod, GLvoid *img );
	 void  nfglMultiTexCoord1d(Uint32 ctx, GLenum target, GLdouble s );
	 void  nfglMultiTexCoord1dv(Uint32 ctx, GLenum target, const GLdouble *v );
	 void  nfglMultiTexCoord1f(Uint32 ctx, GLenum target, GLfloat s );
	 void  nfglMultiTexCoord1fv(Uint32 ctx, GLenum target, const GLfloat *v );
	 void  nfglMultiTexCoord1i(Uint32 ctx, GLenum target, GLint s );
	 void  nfglMultiTexCoord1iv(Uint32 ctx, GLenum target, const GLint *v );
	 void  nfglMultiTexCoord1s(Uint32 ctx, GLenum target, GLshort s );
	 void  nfglMultiTexCoord1sv(Uint32 ctx, GLenum target, const GLshort *v );
	 void  nfglMultiTexCoord2d(Uint32 ctx, GLenum target, GLdouble s, GLdouble t );
	 void  nfglMultiTexCoord2dv(Uint32 ctx, GLenum target, const GLdouble *v );
	 void  nfglMultiTexCoord2f(Uint32 ctx, GLenum target, GLfloat s, GLfloat t );
	 void  nfglMultiTexCoord2fv(Uint32 ctx, GLenum target, const GLfloat *v );
	 void  nfglMultiTexCoord2i(Uint32 ctx, GLenum target, GLint s, GLint t );
	 void  nfglMultiTexCoord2iv(Uint32 ctx, GLenum target, const GLint *v );
	 void  nfglMultiTexCoord2s(Uint32 ctx, GLenum target, GLshort s, GLshort t );
	 void  nfglMultiTexCoord2sv(Uint32 ctx, GLenum target, const GLshort *v );
	 void  nfglMultiTexCoord3d(Uint32 ctx, GLenum target, GLdouble s, GLdouble t, GLdouble r );
	 void  nfglMultiTexCoord3dv(Uint32 ctx, GLenum target, const GLdouble *v );
	 void  nfglMultiTexCoord3f(Uint32 ctx, GLenum target, GLfloat s, GLfloat t, GLfloat r );
	 void  nfglMultiTexCoord3fv(Uint32 ctx, GLenum target, const GLfloat *v );
	 void  nfglMultiTexCoord3i(Uint32 ctx, GLenum target, GLint s, GLint t, GLint r );
	 void  nfglMultiTexCoord3iv(Uint32 ctx, GLenum target, const GLint *v );
	 void  nfglMultiTexCoord3s(Uint32 ctx, GLenum target, GLshort s, GLshort t, GLshort r );
	 void  nfglMultiTexCoord3sv(Uint32 ctx, GLenum target, const GLshort *v );
	 void  nfglMultiTexCoord4d(Uint32 ctx, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
	 void  nfglMultiTexCoord4dv(Uint32 ctx, GLenum target, const GLdouble *v );
	 void  nfglMultiTexCoord4f(Uint32 ctx, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
	 void  nfglMultiTexCoord4fv(Uint32 ctx, GLenum target, const GLfloat *v );
	 void  nfglMultiTexCoord4i(Uint32 ctx, GLenum target, GLint s, GLint t, GLint r, GLint q );
	 void  nfglMultiTexCoord4iv(Uint32 ctx, GLenum target, const GLint *v );
	 void  nfglMultiTexCoord4s(Uint32 ctx, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
	 void  nfglMultiTexCoord4sv(Uint32 ctx, GLenum target, const GLshort *v );
	 void  nfglLoadTransposeMatrixd(Uint32 ctx, const GLdouble m[16] );
	 void  nfglLoadTransposeMatrixf(Uint32 ctx, const GLfloat m[16] );
	 void  nfglMultTransposeMatrixd(Uint32 ctx, const GLdouble m[16] );
	 void  nfglMultTransposeMatrixf(Uint32 ctx, const GLfloat m[16] );
	 void  nfglSampleCoverage(Uint32 ctx, GLclampf value, GLboolean invert );
	 void  nfglActiveTextureARB(Uint32 ctx,GLenum texture);
	 void  nfglClientActiveTextureARB(Uint32 ctx,GLenum texture);
	 void  nfglMultiTexCoord1dARB(Uint32 ctx,GLenum target, GLdouble s);
	 void  nfglMultiTexCoord1dvARB(Uint32 ctx,GLenum target, const GLdouble *v);
	 void  nfglMultiTexCoord1fARB(Uint32 ctx,GLenum target, GLfloat s);
	 void  nfglMultiTexCoord1fvARB(Uint32 ctx,GLenum target, const GLfloat *v);
	 void  nfglMultiTexCoord1iARB(Uint32 ctx,GLenum target, GLint s);
	 void  nfglMultiTexCoord1ivARB(Uint32 ctx,GLenum target, const GLint *v);
	 void  nfglMultiTexCoord1sARB(Uint32 ctx,GLenum target, GLshort s);
	 void  nfglMultiTexCoord1svARB(Uint32 ctx,GLenum target, const GLshort *v);
	 void  nfglMultiTexCoord2dARB(Uint32 ctx,GLenum target, GLdouble s, GLdouble t);
	 void  nfglMultiTexCoord2dvARB(Uint32 ctx,GLenum target, const GLdouble *v);
	 void  nfglMultiTexCoord2fARB(Uint32 ctx,GLenum target, GLfloat s, GLfloat t);
	 void  nfglMultiTexCoord2fvARB(Uint32 ctx,GLenum target, const GLfloat *v);
	 void  nfglMultiTexCoord2iARB(Uint32 ctx,GLenum target, GLint s, GLint t);
	 void  nfglMultiTexCoord2ivARB(Uint32 ctx,GLenum target, const GLint *v);
	 void  nfglMultiTexCoord2sARB(Uint32 ctx,GLenum target, GLshort s, GLshort t);
	 void  nfglMultiTexCoord2svARB(Uint32 ctx,GLenum target, const GLshort *v);
	 void  nfglMultiTexCoord3dARB(Uint32 ctx,GLenum target, GLdouble s, GLdouble t, GLdouble r);
	 void  nfglMultiTexCoord3dvARB(Uint32 ctx,GLenum target, const GLdouble *v);
	 void  nfglMultiTexCoord3fARB(Uint32 ctx,GLenum target, GLfloat s, GLfloat t, GLfloat r);
	 void  nfglMultiTexCoord3fvARB(Uint32 ctx,GLenum target, const GLfloat *v);
	 void  nfglMultiTexCoord3iARB(Uint32 ctx,GLenum target, GLint s, GLint t, GLint r);
	 void  nfglMultiTexCoord3ivARB(Uint32 ctx,GLenum target, const GLint *v);
	 void  nfglMultiTexCoord3sARB(Uint32 ctx,GLenum target, GLshort s, GLshort t, GLshort r);
	 void  nfglMultiTexCoord3svARB(Uint32 ctx,GLenum target, const GLshort *v);
	 void  nfglMultiTexCoord4dARB(Uint32 ctx,GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	 void  nfglMultiTexCoord4dvARB(Uint32 ctx,GLenum target, const GLdouble *v);
	 void  nfglMultiTexCoord4fARB(Uint32 ctx,GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	 void  nfglMultiTexCoord4fvARB(Uint32 ctx,GLenum target, const GLfloat *v);
	 void  nfglMultiTexCoord4iARB(Uint32 ctx,GLenum target, GLint s, GLint t, GLint r, GLint q);
	 void  nfglMultiTexCoord4ivARB(Uint32 ctx,GLenum target, const GLint *v);
	 void  nfglMultiTexCoord4sARB(Uint32 ctx,GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	 void  nfglMultiTexCoord4svARB(Uint32 ctx,GLenum target, const GLshort *v);
*/
	 void  nfglEnableTraceMESA(Uint32 ctx, GLbitfield mask );
	 void  nfglDisableTraceMESA(Uint32 ctx, GLbitfield mask );
	 void  nfglNewTraceMESA(Uint32 ctx, GLbitfield mask, const GLubyte * traceName );
	 void  nfglEndTraceMESA(Uint32 ctx);
	 void  nfglTraceAssertAttribMESA(Uint32 ctx, GLbitfield attribMask );
	 void  nfglTraceCommentMESA(Uint32 ctx, const GLubyte * comment );
	 void  nfglTraceTextureMESA(Uint32 ctx, GLuint name, const GLubyte* comment );
	 void  nfglTraceListMESA(Uint32 ctx, GLuint name, const GLubyte* comment );
	 void  nfglTracePointerMESA(Uint32 ctx, GLvoid* pointer, const GLubyte* comment );
	 void  nfglTracePointerRangeMESA(Uint32 ctx, const GLvoid* first, const GLvoid* last, const GLubyte* comment );
	 void  nfglBlendEquationSeparateATI(Uint32 ctx, GLenum modeRGB, GLenum modeA );

/* Functions generated: 465 */
