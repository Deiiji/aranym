#!/usr/bin/perl -w

use strict;
use IO::Socket;

## usage: saxonclient file-or-url1 file-or-url2 paramkey paramval ...

my ($src, $stl, $dst, $remote, $params);
local *OUTFILE;


$src = shift;
if ($src =~ s/^-o//) {
    if ($src ne "") {
	$dst = $src;
    } else {
	$dst = shift;
    }
    $src = shift;
}
$stl = shift;



if (!($src =~ /:/) &&
    !($src =~ /^\//)) {
    $src = $ENV{PWD} . "/" . $src;
}


if (!($stl =~ /:/) &&
    !($stl =~ /^\//)) {
    $stl = $ENV{PWD} . "/" . $stl;
}

$src = urlencode($src);
$stl = urlencode($stl);

$params = "";

foreach my $p (@ARGV) {
    if ($params ne "") {
	$params = $params . " ";
    }
    if ($p =~ /(.*)=(.*)/) {
       $params = $params . urlencode($1) . " " . urlencode($2);
    } else {
       $params = $params . urlencode($p);
    }
}


$remote = IO::Socket::INET->new(
				Proto    => "tcp",
				PeerAddr => "localhost",
				PeerPort => "9998",
                           )
    or die "cannot connect to saxon at localhost";

print $remote "file:$src file:$stl $params\n";
if (defined $dst) {
    open (OUTFILE, ">$dst") || die "Can not open $dst";
} else {
    *OUTFILE = *STDOUT;
}
while ( <$remote> ) { print OUTFILE }


sub urlencode {
    my $t = shift;

    $t =~ s/([^a-zA-Z0-9_])/sprintf("%%%02x", ord($1))/eg;
    return $t;
}
