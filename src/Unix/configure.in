dnl Process this file with autoconf to produce a configure script.
dnl Written in 1999 by Christian Bauer et al.

AC_INIT(main_unix.cpp)
AC_PREREQ(2.12)
AC_CONFIG_HEADER(config.h)

dnl Options.
AC_ARG_ENABLE(debug,
[  --enable-debug=which    specify which debugger to use [default=uae]],
[ case "$enableval" in
    default)  WHICH_DEBUG="ndebug";;
        uae)  WHICH_DEBUG="uae";;
     ndebug)  WHICH_DEBUG="ndebug";;
     gdebug)  WHICH_DEBUG="gdebug";;
         no)  WHICH_DEBUG="no";;   
	  *)  AC_MSG_ERROR([--enable-debug takes only one of the following values: default, uae, ndebug, no]);;
  esac
],
[WHICH_DEBUG="ndebug"
])
AC_ARG_WITH(mon,             [  --with-mon              use mon as debugger [default=no]], [WANT_MON=$withval], [WANT_MON=no])

AC_ARG_ENABLE(fullhistory,     [  --enable-fullhistory    enable full history for debugger (slower) [default=no]], [WANT_HISTORY=$enableval], [WANT_HISTORY=no])

AC_ARG_ENABLE(fullmmu,         [  --enable-fullmmu        enable full 68040 MMU [default=no]], [WANT_MMU=$enableval], [WANT_MMU=no])

AC_ARG_ENABLE(sdltimer,        [  --enable-sdltimer       use SDL Timer for Timer C [default=no]], [WANT_SDLTIMER=$enableval], [WANT_SDLTIMER=yes])

AC_ARG_ENABLE(pagecheck,       [  --enable-pagecheck      different memory check [default=no]], [WANT_PAGECHECK=$enableval], [WANT_PAGECHECK=yes])

AC_ARG_ENABLE(fixedfastram,    [  --enable-fixedfastram=X use fixed size FastRAM of X MB [default=no]], [WANT_FIXEDFASTRAM=$enableval], [WANT_FIXEDFASTRAM=no])

AC_ARG_ENABLE(directcolor,     [  --enable-directcolor    enable TOS direct truecolor [default=no]], [WANT_DIRECTCOLOR=$enableval], [WANT_DIRECTCOLOR=no])

AC_ARG_ENABLE(blitmemmove,     [  --enable-blitmemmove    enable Blitter memmove rout [default=no]], [WANT_BLITMEMMOVE=$enableval], [WANT_BLITMEMMOVE=no])

AC_ARG_ENABLE(blitsdlblit,     [  --enable-blitsdlblit    enable SDL blitting routine [default=no]], [WANT_BLITSDLBLIT=$enableval], [WANT_BLITSDLBLIT=no])

AC_ARG_ENABLE(aranymfs,        [  --enable-aranymfs       enable aranymfs support [default=yes]], [WANT_ARANYMFS=$enableval], [WANT_ARANYMFS=yes])

dnl FPU emulation core.
AC_ARG_ENABLE(fpe,
[  --enable-fpe=which      specify which fpu emulator to use [default=opt]],
[ case "$enableval" in
    default)	FPE_CORE="default";; dnl ieee for JIT, uae otherwise
	uae)		FPE_CORE="uae";;
	i386)		FPE_CORE="i386";;
	ieee)		FPE_CORE="ieee";;
	*)		AC_MSG_ERROR([--enable-fpe takes only one of the following values: default, uae, i386]);;
  esac
],
[ FPE_CORE="default"
])

dnl Addressing modes.
AC_ARG_ENABLE(addressing,
[  --enable-addressing=AM  specify the addressing mode to use [default=fastest]],
[ case "$enableval" in
    real) 	ADDRESSING_TEST_ORDER="real";;
    direct)	ADDRESSING_TEST_ORDER="direct";;
    normal)	ADDRESSING_TEST_ORDER="normal";;
    *)		AC_MSG_ERROR([--enable-addressing takes only one of the following values: real, direct, normal]);;
  esac
],
[ ADDRESSING_TEST_ORDER="real direct normal"
])

AC_ARG_WITH(tvconfgui,         [  --with-tvconfgui        with TurboVision configuration GUI [default=no]], [WANT_TVCONFGUI=$withval], [WANT_TVCONFGUI=no])

dnl Experimental hacks around spcflags handling.
AC_ARG_ENABLE(spcflags-excl, [  --enable-spcflags-excl  enable exclusive spcflags handling [default=no]], [WANT_SPCFLAGS_EXCL=$enableval], [WANT_SPCFLAGS_EXCL=no])

dnl JIT compiler options.
AC_ARG_ENABLE(jit-compiler,    [  --enable-jit-compiler   enable JIT compiler [default=no]], [WANT_JIT=$enableval], [WANT_JIT=no])

AC_ARG_ENABLE(jit-fpu,
[  --enable-jit-fpu        enable JIT compiler for FPU instructions [default=yes]],
[WANT_JIT_FPU=$enableval],
[ if [[ "x$WANT_JIT" = "xyes" ]]; then
    WANT_JIT_FPU=yes
      else
    WANT_JIT_FPU=no
  fi
])

AC_ARG_ENABLE(jit-debug,       [  --enable-jit-debug      activate native code disassemblers [default=no]], [WANT_JIT_DEBUG=$enableval], [WANT_JIT_DEBUG=no])
		    
dnl Canonical system information.
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

dnl Target OS type (target is host if not cross-compiling).
case "$target_os" in
  linux*)	OS_TYPE=linux;;
  netbsd*)	OS_TYPE=netbsd;;
  freebsd*)	OS_TYPE=freebsd;;
  solaris*)	OS_TYPE=solaris;;
  darwin*)	OS_TYPE=darwin;;
  cygwin*)	OS_TYPE=cygwin;;
  irix*)	OS_TYPE=irix;;
  *)		OS_TYPE=`echo $target_os | sed -e 's/-/_/g' | sed -e 's/\./_/g'`;;
esac
DEFINES="$DEFINES -DOS_$OS_TYPE"

dnl Target CPU type.
HAVE_I386=no
HAVE_M68K=no
HAVE_SPARC=no
HAVE_POWERPC=no
case "$target_cpu" in
  i386* | i486* | i586* | i686* | i786* ) CPU_TYPE=i386 HAVE_I386=yes;;
  m68k* ) CPU_TYPE=m68k HAVE_M68K=yes;;
  sparc* ) CPU_TYPE=sparc HAVE_SPARC=yes;;
  powerpc* ) CPU_TYPE=powerpc HAVE_POWERPC=yes;;
  *) CPU_TYPE=`echo $target_cpu | sed -e 's/-/_/g'`;;
esac
DEFINES="$DEFINES -DCPU_$CPU_TYPE"

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CC_C_O
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PROG_INSTALL

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h fcntl.h sys/time.h sys/mman.h term.h sys/ioctl.h)
AC_CHECK_HEADERS(features.h sys/feature_tests.h dirent.h signal.h getopt.h)
AC_CHECK_HEADERS(termios.h termio.h alloca.h sys/statfs.h sys/statvfs.h)
AC_CHECK_HEADERS(sys/types.h sys/stat.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN
AC_C_CONST
AC_C_INLINE
AC_CHECK_SIZEOF(short, 2)
AC_CHECK_SIZEOF(int, 4)
AC_CHECK_SIZEOF(long, 4)
AC_CHECK_SIZEOF(long long, 8)
AC_CHECK_SIZEOF(float, 4)
AC_CHECK_SIZEOF(double, 8)
AC_CHECK_SIZEOF(long double, 12)
AC_CHECK_SIZEOF(void *, 4)
AC_TYPE_OFF_T
AC_CHECK_TYPE(loff_t, off_t)
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_CHECK_FUNCS(strdup)
AC_CHECK_FUNCS(sigaction signal)
AC_CHECK_FUNCS(mmap mprotect munmap)
AC_CHECK_FUNCS(vm_allocate vm_deallocate vm_protect)

dnl Darwin seems to define mach_task_self() instead of task_self().
AC_CHECK_FUNCS(mach_task_self task_self)

CAN_NATIVE_M68K=no
dnl Use 68k CPU natively?
WANT_NATIVE_M68K=no
if [[ "x$HAVE_M68K" = "xyes" -a "x$CAN_NATIVE_M68K" = "xyes" ]]; then
  AC_DEFINE(ENABLE_NATIVE_M68K)
  WANT_NATIVE_M68K=yes
fi

case "$target_os" in
  linux*)
    EXTRASYSSRCS=linux/parameters_linux.cpp
    ;;
  cygwin*)
    DEFINES="$DEFINES -fpermissive"
    LIBS="$LIBS -lSDL -lSDLmain -liberty"
    EXTRASYSSRCS=parameters_unix.cpp
    ;;
  solaris*)
    AC_DEFINE(_XOPEN_SOURCE, 500)
    DEFINES="$DEFINES -DBSD_COMP -fpermissive -D__EXTENSIONS__"
    EXTRASYSSRCS=parameters_unix.cpp
dnl    WANT_ARANYMFS="no"
    ;;
  irix*)
    EXTRASYSSRCS=parameters_unix.cpp
    ;;
  *)
    EXTRASYSSRCS=parameters_unix.cpp
    ;;
esac

dnl Support for direct access to host's fs
if [[ "x$WANT_ARANYMFS" = "xyes" ]]; then
  EXTFSSRC="../extfs.cpp"
  AC_DEFINE(EXTFS_SUPPORT)
else
  EXTFSSRC=""
fi

SYSSRCS="$EXTFSSRC $SEMSRC $UISRCS $EXTRASYSSRCS"

dnl Define a macro that translates a yesno-variable into a C macro definition
dnl to be put into the config.h file
dnl $1 -- the macro to define
dnl $2 -- the value to translate
AC_DEFUN(AC_TRANSLATE_DEFINE, [
    if [[ "x$2" = "xyes" -o "x$2" = "xguessing yes" ]]; then
        AC_DEFINE($1)
    fi
])

dnl Written by Laurynas Biveinis
dnl GNU Autoconf macro AC_CXX_OPT(option)
dnl Checks if C++ compiler supports specified option.
dnl If yes - adds that option to CXXFLAGS.

AC_DEFUN(AC_CXX_OPT,
[
   AC_REQUIRE([AC_PROG_CXX])
   AC_REQUIRE([AC_LANG_CPLUSPLUS])
   AC_MSG_CHECKING([if C++ compiler supports $1 option])
   old_cxxflags=$CXXFLAGS
   CXXFLAGS="$1 $CXXFLAGS"
   AC_TRY_COMPILE([ ], [ ], test_opt=yes)
   if test -z test_opt; then
      CXXFLAGS=$old_cxxflags
      AC_MSG_RESULT(no)
   else
      AC_MSG_RESULT(yes)
fi
])

dnl GNU Autoconf macro AC_LIB_TVISION
dnl Checks for Turbo Vision library. If it is available - adds it
dnl to LIBS variable and defines HAVE_TVISION.

AC_DEFUN(AC_LIB_TVISION, 
[
   AC_REQUIRE([AC_PROG_CXX])
   AC_REQUIRE([AC_LANG_CPLUSPLUS])
   AC_MSG_CHECKING([for Turbo Vision library])
   ac_lb_save_LIBS="$LIBS"
   LIBS="-lrhtv $LIBS"
   AC_TRY_LINK([void win_ver(void);], [win_ver();], AC_DEFINE(HAVE_TVISION) tvlib=RHTV)
   if test -z $tvlib; then
      LIBS=$ac_lb_save_LIBS
      LIBS="-ltv $LIBS"
      AC_TRY_LINK([void win_ver(void);], [win_ver();], AC_DEFINE(HAVE_TVISION) tvlib=TV)
      if test -z $tvlib; then
         LIBS=$ac_lb_save_LIBS
         AC_MSG_ERROR(not found)
      else
         AC_MSG_RESULT([old version 1.0.3- found])
      fi
   else
      AC_MSG_RESULT(v1.0.4+ found)
   fi
])

dnl Various checks if the system supports vm_allocate() and the like functions.
have_mach_vm=no
if [[ "x$ac_cv_func_vm_allocate" = "xyes" -a "x$ac_cv_func_vm_deallocate" = "xyes" -a \
      "x$ac_cv_func_vm_protect" = "xyes" ]]; then
  have_mach_vm=yes
fi
AC_TRANSLATE_DEFINE(HAVE_MACH_VM, "$have_mach_vm")

dnl Check that vm_allocate(), vm_protect() work
if [[ "x$have_mach_vm" = "xyes" ]]; then

AC_CACHE_CHECK("whether vm_protect works",
  ac_cv_vm_protect_works, [
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  ac_cv_vm_protect_works=yes
  dnl First the tests that should segfault
  for test_def in NONE_READ NONE_WRITE READ_WRITE; do
    AC_TRY_RUN([
      #define CONFIGURE_TEST_VM_MAP
      #define TEST_VM_PROT_$test_def
      #include "vm_alloc.cpp"
    ], ac_cv_vm_protect_works=no, rm -f core,
    dnl When cross-compiling, do not assume anything
    ac_cv_vm_protect_works="guessing no"
    )
  done
  AC_TRY_RUN([
    #define CONFIGURE_TEST_VM_MAP
    #define TEST_VM_PROT_RDWR_WRITE
    #include "vm_alloc.cpp"
  ], , ac_cv_vm_protect_works=no,
  dnl When cross-compiling, do not assume anything
  ac_cv_vm_protect_works="guessing no"
  )
  AC_LANG_RESTORE
  ]
)

dnl Remove support for vm_allocate() if vm_protect() does not work
if [[ "x$have_mach_vm" = "xyes" ]]; then
  case $ac_cv_vm_protect_works in
    *yes) have_mach_vm=yes;;
    *no) have_mach_vm=no;;
  esac
fi
AC_TRANSLATE_DEFINE(HAVE_MACH_VM, "$have_mach_vm")

fi dnl HAVE_MACH_VM

dnl Various checks if the system supports mmap() and the like functions.
dnl ... and Mach memory allocators are not supported
have_mmap_vm=no
if [[ "x$ac_cv_func_mmap" = "xyes" -a "x$ac_cv_func_munmap" = "xyes" -a \
      "x$ac_cv_func_mprotect" = "xyes" ]]; then
  if [[ "x$have_mach_vm" = "xno" ]]; then
    have_mmap_vm=yes
  fi
fi
AC_TRANSLATE_DEFINE(HAVE_MMAP_VM, "$have_mmap_vm")

dnl Check that mmap() and associated functions work.
if [[ "x$have_mmap_vm" = "xyes" ]]; then

dnl Check if we have a working anonymous mmap()
AC_CACHE_CHECK("whether mmap supports MAP_ANON",
  ac_cv_mmap_anon, [
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_TRY_RUN([
    #define HAVE_MMAP_ANON
    #define CONFIGURE_TEST_VM_MAP
    #define TEST_VM_MMAP_ANON
    #include "vm_alloc.cpp"
  ], ac_cv_mmap_anon=yes, ac_cv_mmap_anon=no,
  dnl When cross-compiling, do not assume anything.
  ac_cv_mmap_anon="guessing no"
  )
  AC_LANG_RESTORE
  ]
)
AC_TRANSLATE_DEFINE(HAVE_MMAP_ANON, "$ac_cv_mmap_anon")

AC_CACHE_CHECK("whether mmap supports MAP_ANONYMOUS",
  ac_cv_mmap_anonymous, [
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_TRY_RUN([
    #define HAVE_MMAP_ANONYMOUS
    #define CONFIGURE_TEST_VM_MAP
    #define TEST_VM_MMAP_ANON
    #include "vm_alloc.cpp"
  ], ac_cv_mmap_anonymous=yes, ac_cv_mmap_anonymous=no,
  dnl When cross-compiling, do not assume anything.
  ac_cv_mmap_anonymous="guessing no"
  )
  AC_LANG_RESTORE
  ]
)
AC_TRANSLATE_DEFINE(HAVE_MMAP_ANONYMOUS, "$ac_cv_mmap_anonymous")

AC_CACHE_CHECK("whether mprotect works",
  ac_cv_mprotect_works, [
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  ac_cv_mprotect_works=yes
  dnl First the tests that should segfault
  for test_def in NONE_READ NONE_WRITE READ_WRITE; do
    AC_TRY_RUN([
      #define CONFIGURE_TEST_VM_MAP
      #define TEST_VM_PROT_$test_def
      #include "vm_alloc.cpp"
    ], ac_cv_mprotect_works=no, rm -f core,
    dnl When cross-compiling, do not assume anything
    ac_cv_mprotect_works="guessing no"
    )
  done
  AC_TRY_RUN([
    #define CONFIGURE_TEST_VM_MAP
    #define TEST_VM_PROT_RDWR_WRITE
    #include "vm_alloc.cpp"
  ], , ac_cv_mprotect_works=no,
  dnl When cross-compiling, do not assume anything
  ac_cv_mprotect_works="guessing no"
  )
  AC_LANG_RESTORE
  ]
)

dnl Remove support for mmap() if mprotect() does not work
if [[ "x$have_mmap_vm" = "xyes" ]]; then
  case $ac_cv_mprotect_works in
    *yes) have_mmap_vm=yes;;
    *no) have_mmap_vm=no;;
  esac
fi
AC_TRANSLATE_DEFINE(HAVE_MMAP_VM, $have_mmap_vm)

fi dnl HAVE_MMAP_VM

dnl Check if we have vasprintf (_GNU_SOURCE)
AC_CACHE_CHECK("for vasprintf",
  ac_cv_have_vasprintf, [
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_TRY_COMPILE([
    #define _GNU_SOURCE
    #include <stdio.h>
  ], [
    va_list a;
    vasprintf(NULL, NULL, a);
  ],
  [ac_cv_have_vasprintf=yes],
  [ac_cv_have_vasprintf=no]
  )
  AC_LANG_RESTORE
  ]
)
AC_TRANSLATE_DEFINE(HAVE_GNU_SOURCE, "$ac_cv_have_vasprintf")
if [[ "x$ac_cv_have_vasprintf" = "xyes" ]]; then
  DEFINES="$DEFINES -D_GNU_SOURCE"
else SYSSRCS="$SYSSRCS vasprintf.c"
fi

dnl Check if we have getopt_long
AC_CACHE_CHECK("for getopt_long",
  ac_cv_have_getopt_long, [
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_TRY_COMPILE([
    #define _GNU_SOURCE
    #include <unistd.h>
    #include <getopt.h>
  ], [
    getopt_long(0, NULL, NULL, NULL, NULL);
  ],
  [ac_cv_have_getopt_long=yes],
  [ac_cv_have_getopt_long=no]
  )
  AC_LANG_RESTORE
  ]
)
AC_TRANSLATE_DEFINE(HAVE_GETOPT_H, "$ac_cv_have_getopt_long")

if [[ "x$ac_cv_have_getopt_long" = "xno" ]]; then
  SYSSRCS="$SYSSRCS getopt_init.c getopt1.c getopt.c"
fi

dnl Check if we can mmap 0x2000 bytes from 0x0000
AC_CACHE_CHECK("whether we can map Low Memory area 0x0000-0x2000",
  ac_cv_can_map_lm, [
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_TRY_RUN([
    #include "vm_alloc.cpp"
    int main(void) { /* returns 0 if we could map the lowmem globals */
      volatile char * lm = 0;
      if (vm_init() < 0) exit(1);
      if (vm_acquire_fixed(0, 0x2000) == false) exit(1);
      lm[0] = 'z';
      if (vm_release((char *)lm, 0x2000) < 0) exit(1);
      vm_exit(); exit(0);
    }
  ], ac_cv_can_map_lm=yes, ac_cv_can_map_lm=no,
  dnl When cross-compiling, do not assume anything.
  ac_cv_can_map_lm="guessing no"
  )
  AC_LANG_RESTORE
  ]
)

SYSSRCS="$SYSSRCS $MONSRCS"

dnl Full opcode's history
if [[ "x$WANT_HISTORY" = "xyes" ]]; then
    AC_DEFINE(FULL_HISTORY)
fi

dnl TurboVision conf GUI
if [[ "x$WANT_TVCONFGUI" = "xyes" ]]; then
dnl     AC_LIB_TVISION need another func than win_ver
    AC_CHECK_HEADERS(rhtvision/tv/applictn.h)
    AC_DEFINE(HAVE_TVISION)
    TV_CFLAGS="-I/usr/include/rhtvision"
    TV_LIBS="-lrhtv"
fi

dnl Full MMU
if [[ "x$WANT_MMU" = "xyes" ]]; then
    AC_DEFINE(FULLMMU)
fi

dnl Timer C
if [[ "x$WANT_SDLTIMER" = "xyes" ]]; then
    AC_DEFINE(USE_TIMERS)
fi

dnl Page check
if [[ "x$WANT_PAGECHECK" = "xyes" ]]; then
    AC_DEFINE(PAGE_CHECK)
fi

dnl fixed size FastRAM
if [[ "x$WANT_FIXEDFASTRAM" != "xno" ]]; then
    AC_DEFINE(FixedSizeFastRAM, $WANT_FIXEDFASTRAM)
fi

dnl Direct Truecolor
if [[ "x$WANT_DIRECTCOLOR" = "xyes" ]]; then
    AC_DEFINE(DIRECT_TRUECOLOR)
fi

dnl Blitter memmove acceleration
if [[ "x$WANT_BLITMEMMOVE" = "xyes" ]]; then
    AC_DEFINE(BLITTER_MEMMOVE)
fi

dnl Blitter SDL surface blitting
if [[ "x$WANT_BLITSDLBLIT" = "xyes" ]]; then
    AC_DEFINE(BLITTER_SDLBLIT)
    AC_DEFINE(BLITTER_MEMMOVE)	dnl required for the SDLBLIT
fi

dnl The JIT Compiler needs JIT_ADDRESING
if [[ "x$WANT_JIT" = "xyes" ]]; then
  ADDRESSING_TEST_ORDER="jit"
fi

dnl Determine the addressing mode to use
if [[ "x$WANT_NATIVE_M68K" = "xyes" ]]; then
  ADDRESSING_MODE="real"
else
  ADDRESSING_MODE=""
  AC_MSG_CHECKING([for the addressing mode to use])
  for am in $ADDRESSING_TEST_ORDER; do
    case $am in
    real)
      dnl Requires ability to mmap() Low Memory globals
      if [[ "x$ac_cv_can_map_lm" = "xno" ]]; then
        continue
      fi
      dnl Problems with Cygwin
      if [[ "x$OS_TYPE" = "xcygwin" ]]; then
        continue
      fi
      dnl Problems with Solaris
      if [[ "x$OS_TYPE" = "xsolaris" ]]; then
        continue
      fi
      dnl Real addressing will probably work.
      ADDRESSING_MODE="real"
      DEFINES="$DEFINES -DREAL_ADDRESSING"
      break
      ;;
    direct)
      dnl Problems with Cygwin
      if [[ "x$OS_TYPE" = "xcygwin" ]]; then
        continue
      fi
      dnl Problems with Solaris
      if [[ "x$OS_TYPE" = "xsolaris" ]]; then
        continue
      fi
      ADDRESSING_MODE="direct"
      DEFINES="$DEFINES -DDIRECT_ADDRESSING"
      break
      ;;
    jit)
      if [[ "x$OS_TYPE" = "xcygwin" ]]; then
        continue
      fi
      if [[ "x$OS_TYPE" = "xsolaris" ]]; then
        continue
      fi
      ADDRESSING_MODE="jit"
      DEFINES="$DEFINES -DJIT_ADDRESSING"
      break
      ;;
    normal)
      ADDRESSING_MODE="normal"
      DEFINES="$DEFINES -DNORMAL_ADDRESSING"
      break
      ;;
    *)
      AC_MSG_ERROR([Internal configure.in script error for $am addressing mode])
    esac
  done
  AC_MSG_RESULT($ADDRESSING_MODE)
  if [[ "x$ADDRESSING_MODE" = "x" ]]; then
    AC_MSG_ERROR([Sorry, no suitable addressing mode in $ADDRESSING_TEST_ORDER])
  fi
fi

dnl Check for GAS.
HAVE_GAS=no
AC_MSG_CHECKING(for GAS .p2align feature)
cat >conftest.S << EOF
	.text
	.p2align 5
EOF
if $CC conftest.S -c -o conftest.o >/dev/null 2>&1 ; then HAVE_GAS=yes; fi
AC_MSG_RESULT($HAVE_GAS)

dnl Check for GCC 2.7 or higher.
HAVE_GCC27=no
AC_MSG_CHECKING(for GCC 2.7 or higher)
AC_EGREP_CPP(yes,
[#if __GNUC__ - 1 > 1 || __GNUC_MINOR__ - 1 > 5
  yes
#endif
], [AC_MSG_RESULT(yes); HAVE_GCC27=yes], AC_MSG_RESULT(no))

dnl Set "-fomit-frame-pointer" on i386 GCC 2.7 or higher.
if [[ "x$HAVE_GCC27" = "xyes" -a "x$HAVE_I386" = "xyes" ]]; then
  CFLAGS="$CFLAGS -fomit-frame-pointer"
  CXXFLAGS="$CXXFLAGS -fomit-frame-pointer"
fi

dnl Select appropriate CPU source and REGPARAM define.
ASM_OPTIMIZATIONS=none
CPUSRCS="cpuemu1.cpp cpuemu2.cpp cpuemu3.cpp cpuemu4.cpp cpuemu5.cpp cpuemu6.cpp cpuemu7.cpp cpuemu8.cpp"
JITSRCS="compemu1.cpp compemu2.cpp compemu3.cpp compemu4.cpp compemu5.cpp compemu6.cpp compemu7.cpp compemu8.cpp"
if [[ "x$HAVE_GCC27" = "xyes" -a "x$HAVE_I386" = "xyes" -a "x$OS_TYPE" != "xfreebsd" ]]; then
  dnl i386 CPU
  DEFINES="$DEFINES -DREGPARAM=\"__attribute__((regparm(3)))\""
  if [[ "x$HAVE_GAS" = "xyes" ]]; then
    ASM_OPTIMIZATIONS=i386
    DEFINES="$DEFINES -DX86_ASSEMBLY -DUNALIGNED_PROFITABLE -DOPTIMIZED_FLAGS"
    CPUSRCS="cpufast1.s cpufast2.s cpufast3.s cpufast4.s cpufast5.s cpufast6.s cpufast7.s cpufast8.s"
    JITSRCS="cpufast1_nf.s cpufast2_nf.s cpufast3_nf.s cpufast4_nf.s cpufast5_nf.s cpufast6_nf.s cpufast7_nf.s cpufast8_nf.s $JITSRCS"
    CAN_JIT=yes
  fi
elif [[ "x$HAVE_GCC27" = "xyes" -a "x$HAVE_SPARC" = "xyes" -a "x$HAVE_GAS" = "xyes" ]]; then
  dnl SPARC CPU
  case "$target_os" in
  solaris*)
    AC_MSG_CHECKING(SPARC CPU architecture)
    SPARC_TYPE=`solaris/which_sparc`
    AC_MSG_RESULT($SPARC_TYPE)
    case "$SPARC_TYPE" in
    SPARC_V8)
      ASM_OPTIMIZATIONS="SPARC V8 architecture"
      DEFINES="$DEFINES -DSPARC_V8_ASSEMBLY" dnl -DOPTIMIZED_FLAGS"
      CFLAGS="$CFLAGS -Wa,-Av8"
      CXXFLAGS="$CXXFLAGS -Wa,-Av8"
      ;;
    SPARC_V9)
      ASM_OPTIMIZATIONS="SPARC V9 architecture"
      DEFINES="$DEFINES -DSPARC_V9_ASSEMBLY" dnl -DOPTIMIZED_FLAGS"
      CFLAGS="$CFLAGS -Wa,-Av9"
      CXXFLAGS="$CXXFLAGS -Wa,-Av9"
      ;;
    esac
    ;;
  esac
elif [[ "x$WANT_NATIVE_M68K" = "xyes" ]]; then
  dnl Native m68k, no emulation
  CPUINCLUDES="-I../native_cpu"
  CPUSRCS="asm_support.s"
fi

dnl JIT sources if available
if [[ "x$WANT_JIT" = "xyes" -a "x$CAN_JIT" ]]; then
  JITSRCS="$JITSRCS ../uae_cpu_jit/compiler/compemu_support.cpp"
  DEFINES="$DEFINES -DUSE_JIT"
  TABLE68K="../uae_cpu_jit/table68k"

  if [[ "x$WANT_JIT_DEBUG" = "xyes" ]]; then
    if [[ "x$WANT_MON" = "xyes" ]]; then
      DEFINES="$DEFINES -DJIT_DEBUG=1"
    else
      AC_MSG_WARN([cxmon not found, ignoring --enable-jit-debug])
      WANT_JIT_DEBUG=no
    fi
  fi

  if [[ "x$WANT_JIT_FPU" = "xyes" ]]; then
    DEFINES="$DEFINES -DUSE_JIT_FPU"
    JITSRCS="$JITSRCS ../uae_cpu_jit/compiler/compemu_fpp.cpp"
  fi

  JITSRCS="$JITSRCS compstbl.o cpustbl_nf.o"
else
  WANT_JIT=no
  WANT_JIT_FPU=no
  WANT_JIT_DEBUG=no
  JITSRCS=""
  TABLE68K="../uae_cpu/table68k"
fi

dnl Select appropriate FPU source.
dnl 1. Optimized X86 assembly core if target is i386 architecture
SAVED_DEFINES=$DEFINES
if [[ "x$FPE_CORE" = "xi386" ]]; then
  if [[ "x$HAVE_GCC27" = "xyes" -a "x$HAVE_I386" = "xyes" -a "x$HAVE_GAS" = "xyes" ]]; then
    DEFINES="$DEFINES -DFPU_X86"
    FPE_CORE_STR="i386 optimized core"
    FPUSRCS="../uae_cpu/fpu/fpu_x86.cpp"
  else
    AC_MSG_WARN([Sorry, no suitable FPU mode i386])
    FPE_CORE="uae"
  fi
fi

if [[ "x$FPE_CORE" = "xdefault" ]]; then
  FPE_CORE="uae"
fi

dnl 2. JIT-FPU only supports IEEE-based implementation.
if [[ "x$WANT_JIT_FPU" = "xyes" -a "x$FPE_CORE" != "xieee" ]]; then
  AC_MSG_WARN([Sorry, JIT-FPU supports only the "ieee" FPE implementation])
  FPE_CORE="ieee"
  dnl Restore previous variables. FPE_CORE_STR and FPUSRCS are overwritten
  DEFINES=$SAVED_DEFINES
fi

dnl 3. Choose either IEEE-based implementation or the old UAE core
if [[ "x$FPE_CORE" = "xieee" ]]; then
  AC_CHECK_HEADERS(fenv.h)
  AC_CHECK_FUNCS(feclearexcept fegetexceptflag feraiseexcept fesetexceptflag fetestexcept)
  AC_CHECK_FUNCS(fegetround fesetround)
  DEFINES="$DEFINES -DFPU_IEEE"
  FPE_CORE_STR="ieee-based fpu core"
  FPUSRCS="../uae_cpu_jit/fpu/fpu_ieee.cpp"
elif [[ "x$FPE_CORE" = "xuae" ]]; then
  DEFINES="$DEFINES -DFPU_UAE"
  FPE_CORE_STR="original uae core"
  FPUSRCS="../uae_cpu/fpu/fpu_uae.cpp"
fi

dnl Check for certain math functions
dnl AC_CHECK_FUNCS(atanh)
AC_CACHE_CHECK("for atanh",
  ac_cv_have_atanh, [
  AC_LANG_SAVE
  AC_LANG_CPLUSPLUS
  AC_TRY_COMPILE([
    #include <math.h>
  ], [
    atanh(1);
  ],
  [ac_cv_have_atanh=yes],
  [ac_cv_have_atanh=no]
  )
  AC_LANG_RESTORE
  ]
)
AC_TRANSLATE_DEFINE(HAVE_ATANH, "$ac_cv_have_atanh")

dnl Select debugger
if [[ "x$WANT_JIT" = "xno" ]]; then
  if [[ "x$WHICH_DEBUG" = "xndebug" ]]; then
    AC_DEFINE(DEBUGGER)
    AC_DEFINE(NEWDEBUG)
    CPUSRCS="$CPUSRCS ../uae_cpu/debug.cpp"
  fi

  dnl UAE debugger
  if [[ "x$WHICH_DEBUG" = "xuae" ]]; then
    AC_DEFINE(DEBUGGER)
    CPUSRCS="$CPUSRCS ../uae_cpu/debug.cpp"
  fi

  dnl We use mon if possible.
  MONSRCS=
  if [[ "x$WANT_MON" = "xyes" ]]; then
    if [[ "x$WHICH_DEBUG" = "xndebug" ]]; then
      AC_MSG_WARN([ndebug and mon couldn't cooperated today]);
      WANT_MON=no
    else
      AC_MSG_CHECKING(for mon)
      mon_srcdir=../mon/src
      if grep mon_init $mon_srcdir/mon.h >/dev/null 2>/dev/null; then
        AC_MSG_RESULT(yes)
        AC_DEFINE(ENABLE_MON)
        MONSRCS="$mon_srcdir/mon.cpp $mon_srcdir/mon_6502.cpp $mon_srcdir/mon_z80.cpp $mon_srcdir/mon_cmd.cpp $mon_srcdir/mon_disass.cpp $mon_srcdir/mon_ppc.cpp $mon_srcdir/disass/floatformat.c $mon_srcdir/disass/i386-dis.c $mon_srcdir/disass/m68k-dis.c $mon_srcdir/disass/m68k-opc.c"
        CXXFLAGS="$CXXFLAGS -I$mon_srcdir -I$mon_srcdir/disass"
        AC_CHECK_LIB(readline, readline)
        AC_CHECK_LIB(termcap, tputs)
        AC_CHECK_HEADERS(readline.h history.h readline/readline.h readline/history.h)
      else
        AC_MSG_RESULT(no)
        AC_MSG_WARN([Could not find mon, ignoring --with-mon.])
        WANT_MON=no
      fi
    fi
  fi
fi

AC_CHECK_FUNCS(isnan isinf)		dnl C99
AC_CHECK_FUNCS(isnanl isinfl)	dnl IEEE ?

dnl Exclusive spcflags handling
if [[ "x$WANT_SPCFLAGS_EXCL" = "xyes" ]]; then
  DEFINES="$DEFINES -DENABLE_EXCLUSIVE_SPCFLAGS"
fi

dnl UAE CPU sources for all non-m68k-native architectures.
if [[ "x$WANT_NATIVE_M68K" = "xno" ]]; then
  if [[ "x$WANT_JIT" = "xyes" -a "x$CAN_JIT" ]]; then
    CPUINCLUDES="-I../uae_cpu_jit"
    CPUSRCS="../uae_cpu_jit/basilisk_glue.cpp ../uae_cpu_jit/newcpu.cpp ../uae_cpu_jit/readcpu.cpp $FPUSRCS cpustbl.cpp cpudefs.cpp $CPUSRCS $JITSRCS"
  else
    CPUINCLUDES="-I../uae_cpu"
    CPUSRCS="../uae_cpu/basilisk_glue.cpp ../uae_cpu/memory.cpp ../uae_cpu/newcpu.cpp ../uae_cpu/readcpu.cpp $FPUSRCS cpustbl.cpp cpudefs.cpp $CPUSRCS"
  fi
fi

dnl Remove the "-g" option if set for GCC.
if [[ "x$HAVE_GCC27" = "xyes" ]]; then
  CFLAGS=`echo $CFLAGS | sed -e 's/-g//g'`
  CXXFLAGS=`echo $CXXFLAGS | sed -e 's/-g//g'`
fi

dnl Remove the "-O2" option if set for GCC and set the "-O3" option.
if [[ "x$HAVE_GCC27" = "xyes" ]]; then
  CFLAGS=`echo $CXXFLAGS | sed -e 's/-O2//g'`
  CFLAGS="-O3 $CFLAGS"
  CXXFLAGS=`echo $CXXFLAGS | sed -e 's/-O2//g'`
  CXXFLAGS="-O3 $CXXFLAGS"
fi

dnl Or if we have -Ofast
if [[ "x$HAVE_OFAST" = "xyes" ]]; then
  CFLAGS="`echo $CFLAGS | sed -e 's/-g//g'` -Ofast"
  CXXFLAGS="`echo $CXXFLAGS | sed -e 's/-g//g'` -Ofast"
  CXXFLAGS="-LANG:std $CXXFLAGS"
  LDFLAGS="$LDFLAGS -Ofast"
fi

SDL_CFLAGS=
SDL_LIBS=
AM_PATH_SDL(1.2.0, )
LIBS="$LIBS $SDL_LIBS"
CFLAGS="$CFLAGS $SDL_CFLAGS"
CXXFLAGS="$CXXFLAGS $SDL_CFLAGS"

dnl Generate Makefile.
AC_SUBST(SET_MAKE)
AC_SUBST(DEFINES)
AC_SUBST(SYSSRCS)
AC_SUBST(CPUINCLUDES)
AC_SUBST(CPUSRCS)
AC_SUBST(TV_CFLAGS)
AC_SUBST(TV_LIBS)
AC_SUBST(TABLE68K)
AC_OUTPUT(Makefile)

dnl Print summary.
echo
echo ARAnyM configuration summary:
echo
echo Running m68k code natively ............. : $WANT_NATIVE_M68K
echo Use exclusive spcflags handling ........ : $WANT_SPCFLAGS_EXCL
echo Use JIT compiler ....................... : $WANT_JIT
echo Use JIT compiler for FPU instructions .. : $WANT_JIT_FPU
echo JIT debug mode ......................... : $WANT_JIT_DEBUG
echo Floating-Point emulation core .......... : $FPE_CORE_STR
echo Assembly optimizations ................. : $ASM_OPTIMIZATIONS
echo Addressing mode ........................ : $ADDRESSING_MODE
echo Full MMU support ....................... : $WANT_MMU
echo Debugger ............................... : $WHICH_DEBUG
echo Monitor ................................ : $WANT_MON
echo Aranymrc confgui ....................... : $WANT_TVCONFGUI
echo Timer C using SDL Timer ................ : $WANT_SDLTIMER
echo Page check memory ...................... : $WANT_PAGECHECK
echo FastRAM fixed size ..................... : $WANT_FIXEDFASTRAM
echo TOS Direct Truecolor.................... : $WANT_DIRECTCOLOR
echo Blitter memmove acceleration ........... : $WANT_BLITMEMMOVE
echo Blitter SDL blit acceleration .......... : $WANT_BLITSDLBLIT
echo Support for aranymfs ................... : $WANT_ARANYMFS

echo
echo "Configuration done. Now type \"make\" (or \"gmake\")."
