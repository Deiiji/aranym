# Unix makefile for ARAnyM
# Inspired in BasiliskII's Makefile

## System specific configuration
@SET_MAKE@
SHELL = /bin/sh

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
datadir = @datadir@
mandir = @mandir@
man1dir = $(mandir)/man1
docdir = $(prefix)/share/doc
srcdir = @srcdir@

DESTDIR =

CC = @CC@
CXX = @CXX@
CFLAGS = -I$(srcdir)/../include -I$(srcdir) -I. -I$(srcdir)../natfeat @CFLAGS@
CXXFLAGS = @CXXFLAGS@
CPPFLAGS = -I$(srcdir)/../include -I$(srcdir) -I. -I$(srcdir)/../natfeat @CPUINCLUDES@ @CPPFLAGS@
WFLAGS = @WFLAGS@
DEFS = @DEFS@ @DEFINES@ -D_REENTRANT -D_THREAD_SAFE
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
SDL_LIBS = @SDL_LIBS@
SDL_CONFIG = @SDL_CONFIG@
SDL_CFLAGS = @SDL_CFLAGS@
SYSSRCS = @SYSSRCS@
CPUSRCS = @CPUSRCS@
DSPSRCS = @DSPSRCS@
MIDISEQSRCS = @MIDISEQSRCS@
NFCDROMSRCS = @NFCDROMSRCS@
NFPCISRCS = @NFPCISRCS@
NFOSMESASRCS = @NFOSMESASRCS@
NFJPEGSRCS = @NFJPEGSRCS@
NFVDIGLSRCS = @NFVDIGLSRCS@
NFCLIPBOARDSRCS = @NFCLIPBOARDSRCS@
PARALLELX86SRCS = @PARALLELX86SRCS@
PARALLELPARPORTSRCS = @PARALLELPARPORTSRCS@
GUISDLSRCS = @GUISDLSRCS@
DBGSP = @DBGSP@
TAPIF = @TAPIF@

ACLOCAL = aclocal
AUTOCONF = autoconf
AUTOHEADER = autoheader

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@ -s
INSTALL_DATA = @INSTALL_DATA@

host_alias = @host_alias@
host_triplet = @host@

## Files
SRCS = ../main.cpp \
	main_unix.cpp \
	vm_alloc.cpp \
	host_clock_unix.cpp \
	../acia.cpp \
	../acsifdc.cpp \
	../aradata.cpp \
	../aranym_exception.cpp \
	../ata.cpp \
	../audio_dma.cpp \
	../audio_crossbar.cpp \
	../blitter.cpp \
	../bootos.cpp \
	../bootos_tos.cpp \
	../bootos_emutos.cpp \
	../bootos_linux.cpp \
	../cdrom.cpp \
	../cfgopts.c \
	../dsp.cpp \
	../emul_op.cpp \
	../natfeats.cpp \
	../fakeio.cpp \
	../hardware.cpp \
	../host.cpp \
	../host_audio.cpp \
	../host_clock.cpp \
	../hostscreen.cpp \
	../ide.cpp \
	../identify.cpp \
	../ikbd.cpp \
	../input.cpp \
	../md5.cpp \
	../mfp.cpp \
	../midi.cpp \
	../midi_file.cpp \
	../mmu.cpp \
	../ndebug.cpp \
	../ncr5380.cpp \
	../parallel.cpp \
	../parallel_file.cpp \
	../parameters.cpp \
	../romdiff.cpp \
	../rtc.cpp \
	../tools.cpp \
	../videl.cpp \
	../yamaha.cpp \
	../natfeat/nf_base.cpp \
	../natfeat/nf_objs.cpp \
	../natfeat/xhdi.cpp \
	../natfeat/nfaudio.cpp \
	../natfeat/nfbootstrap.cpp \
	../natfeat/nf_basicset.cpp \
	../natfeat/debugprintf.cpp \
	../natfeat/nfvdi.cpp \
	../natfeat/nfvdi_soft.cpp \
	$(MIDISEQSRCS) \
	$(NFCDROMSRCS) \
	$(NFPCISRCS) \
	$(NFOSMESASRCS) \
	$(NFJPEGSRCS) \
	$(NFVDIGLSRCS) \
	$(NFCLIPBOARDSRCS) \
	$(PARALLELX86SRCS) \
	$(PARALLELPARPORTSRCS) \
	$(SYSSRCS) \
	$(CPUSRCS) \
	$(DSPSRCS) \
	$(LILOSRCS) \
	$(GUISDLSRCS)

BUNDLE_RESOURCES = \
	darwin/aranym2.icns \
	
BUNDLE_LOCALIZATON_ROOT = \
	darwin/
BUNDLE_LOCALIZATON_ROOT_REMOVE = \
	../

BUNDLE_LOCALIZATON_FOLDERS = \
	*.lproj
	
BUNDLE_LOCALIZATON_FILES = \
	aranym.nib
	
BUNDLE_CONTENTS = \
	darwin/info.plist \
	darwin/PkgInfo 	

APP = aranym
APP_STATIC = aranym-static
APP_LIB = libaranym.a
APP_BUNDLE = ARAnym.app
APP_IFC = aratapif
TARGET = @TARGET@

## Rules
.PHONY: install installdirs uninstall mostlyclean clean distclean depend dep $(APP_BUNDLE)
.SUFFIXES:
.SUFFIXES: .c .cpp .s .o .h .m .M

all: $(TARGET) $(TAPIF)

OBJ_DIR = obj
$(OBJ_DIR)::
	@[ -d $(OBJ_DIR) ] || mkdir $(OBJ_DIR) > /dev/null 2>&1

define SRCS_LIST_TO_OBJS
	$(addprefix $(OBJ_DIR)/, $(addsuffix .o, $(foreach file, $(SRCS), \
	$(basename $(notdir $(file))))))
endef

define DEPSRCS
	$(addsuffix .o, $(foreach file, $(SRCS), \
	$(basename $(notdir $(file)))))
endef

OBJS = $(SRCS_LIST_TO_OBJS)

SRC_PATHS += $(sort $(foreach file, $(SRCS), $(dir $(file))))
VPATH :=
VPATH += $(addprefix :, $(subst  ,:, $(filter-out $($(subst, :, ,$(VPATH))), $(addprefix $(filter-out ./,$(srcdir)/), $(SRC_PATHS)))))

$(APP): $(OBJ_DIR) $(OBJS)
	$(CXX) -o $(APP) $(LDFLAGS) $(OBJS) $(LIBS)

$(APP_STATIC): $(OBJ_DIR) $(OBJS)
	$(CXX) -o $(APP_STATIC) -static $(LDFLAGS) $(OBJS) $(LIBS)

$(APP_LIB): $(OBJ_DIR) $(OBJS)
	$(LD) -r -o $(APP_LIB) $(LDFLAGS) $(OBJS) $(LIBS)

$(APP_BUNDLE): $(APP)
	rm -rf $(APP_BUNDLE)
	mkdir -p $(APP_BUNDLE)/Contents
	cp -r $(BUNDLE_CONTENTS) $(APP_BUNDLE)/Contents
	mkdir -p $(APP_BUNDLE)/Contents/MacOS
	cp $(APP) $(APP_BUNDLE)/Contents/MacOS
	#mkdir -p $(APP_BUNDLE)/Contents/ARAnyM
	mkdir -p $(APP_BUNDLE)/Contents/Resources
	cp -r $(BUNDLE_RESOURCES) $(APP_BUNDLE)/Contents/Resources
	cd $(BUNDLE_LOCALIZATON_ROOT); \
		for locFolder in $(BUNDLE_LOCALIZATON_FOLDERS); do \
			mkdir -p $(BUNDLE_LOCALIZATON_ROOT_REMOVE)$(APP_BUNDLE)/Contents/Resources/$$locFolder; \
			for locFile in $(BUNDLE_LOCALIZATON_FILES); do \
				cp -r $$locFolder/$$locFile \
					$(BUNDLE_LOCALIZATON_ROOT_REMOVE)$(APP_BUNDLE)/Contents/Resources/$$locFolder/$$locFile; \
				rm -rf $(BUNDLE_LOCALIZATON_ROOT_REMOVE)$(APP_BUNDLE)/Contents/Resources/$$locFolder/$$locFile/CVS; \
				rm -rf $(BUNDLE_LOCALIZATON_ROOT_REMOVE)$(APP_BUNDLE)/Contents/Resources/$$locFolder/$$locFile/*/CVS; \
			done; \
		done

install: $(APP) $(TAPIF) $(APP).1.gz $(APP)-jit.1.gz $(APP)-mmu.1.gz $(APP_IFC).1.gz installdirs
	$(INSTALL_PROGRAM) $(APP) $(DESTDIR)$(bindir)/$(APP)
	if [ "x$(APP_IFC)" = "x$(TAPIF)" ]; then \
	$(INSTALL_PROGRAM) $(APP_IFC) $(DESTDIR)$(bindir)/$(APP_IFC);\
	$(INSTALL_DATA) $(APP_IFC).1.gz $(DESTDIR)$(man1dir)/$(APP_IFC).1.gz ;\
	fi
	$(INSTALL_DATA) $(APP).1.gz $(DESTDIR)$(man1dir)/$(APP).1.gz
	$(INSTALL_DATA) $(APP)-jit.1.gz $(DESTDIR)$(man1dir)/$(APP)-jit.1.gz
	$(INSTALL_DATA) $(APP)-mmu.1.gz $(DESTDIR)$(man1dir)/$(APP)-mmu.1.gz
	$(INSTALL_DATA) $(srcdir)/../../ChangeLog $(DESTDIR)$(docdir)/$(APP)/changelog
	$(INSTALL_DATA) $(srcdir)/../../TODO $(DESTDIR)$(docdir)/$(APP)/TODO
	$(INSTALL_DATA) $(srcdir)/../../AUTHORS $(DESTDIR)$(docdir)/$(APP)/AUTHORS
	$(INSTALL_DATA) $(srcdir)/../../NEWS $(DESTDIR)$(docdir)/$(APP)/NEWS
	$(INSTALL_DATA) $(srcdir)/../../README $(DESTDIR)$(docdir)/$(APP)/README
	$(INSTALL_DATA) $(srcdir)/../../FAQ $(DESTDIR)$(docdir)/$(APP)/FAQ
	$(INSTALL_DATA) $(srcdir)/../../COPYING $(DESTDIR)$(docdir)/$(APP)/COPYING
	$(INSTALL_DATA) $(srcdir)/../../BUGS $(DESTDIR)$(docdir)/$(APP)/BUGS
	$(INSTALL_DATA) $(srcdir)/../../INSTALL $(DESTDIR)$(docdir)/$(APP)/INSTALL
	$(INSTALL_DATA) $(srcdir)/../../doc/config $(DESTDIR)$(docdir)/$(APP)/config
	$(INSTALL_DATA) $(srcdir)/../../atari/newdesk.inf $(DESTDIR)$(datadir)/$(APP)/atari/newdesk.inf
	$(INSTALL_DATA) $(srcdir)/../../atari/mmusetup.cnf $(DESTDIR)$(datadir)/$(APP)/atari/mmusetup.cnf
	$(INSTALL_DATA) $(srcdir)/../../atari/hostfs/bdconfig.sys $(DESTDIR)$(datadir)/$(APP)/atari/hostfs/bdconfig.sys
	$(INSTALL_DATA) $(srcdir)/../../atari/hostfs/README $(DESTDIR)$(datadir)/$(APP)/atari/hostfs/README
	$(INSTALL_DATA) $(srcdir)/../../atari/network/ethernet/nfeth-config/eth0-config.sh $(DESTDIR)$(datadir)/$(APP)/atari/network/eth0-config.sh
	$(INSTALL_DATA) $(srcdir)/../../atari/network/ethernet/README $(DESTDIR)$(datadir)/$(APP)/atari/network/README
	$(INSTALL) $(srcdir)/../../tools/arabridge $(DESTDIR)$(datadir)/$(APP)/arabridge
	$(INSTALL) $(srcdir)/../../tools/floppy.sh $(DESTDIR)$(datadir)/$(APP)/floppy.sh
	$(INSTALL_DATA) $(srcdir)/../../atari/tools/README $(DESTDIR)$(datadir)/$(APP)/atari/tools/README
	$(INSTALL_DATA) $(srcdir)/../../atari/tools/pc101us.kbd.bz2 $(DESTDIR)$(datadir)/$(APP)/atari/tools/pc101us.kbd.bz2
	$(INSTALL_DATA) $(srcdir)/../../atari/sound/README $(DESTDIR)$(datadir)/$(APP)/atari/sound/README
	
installdirs:
	$(SHELL) $(srcdir)/mkinstalldirs $(DESTDIR)$(bindir) $(DESTDIR)$(man1dir) $(DESTDIR)$(datadir)/$(APP) $(DESTDIR)$(datadir)/$(APP)/atari $(DESTDIR)$(datadir)/$(APP)/atari/hostfs $(DESTDIR)$(datadir)/$(APP)/atari/nfcdrom $(DESTDIR)$(datadir)/$(APP)/atari/nfjpeg $(DESTDIR)$(datadir)/$(APP)/atari/nfosmesa $(DESTDIR)$(datadir)/$(APP)/atari/network $(DESTDIR)$(datadir)/$(APP)/atari/tools $(DESTDIR)$(datadir)/$(APP)/atari/sound $(DESTDIR)$(docdir)/$(APP)

uninstall:
	rm -f $(DESTDIR)$(bindir)/$(APP)
	if [ "x$(APP_IFC)" = "x$(TAPIF)" ]; then \
	rm -f $(DESTDIR)$(bindir)/$(APP_IFC);\
	rm -f $(DESTDIR)$(man1dir)/$(APP_IFC).1.gz ;\
	fi
	rm -f $(DESTDIR)$(man1dir)/$(APP).1.gz
	rm -f $(DESTDIR)$(man1dir)/$(APP)-jit.1.gz
	rm -f $(DESTDIR)$(man1dir)/$(APP)-mmu.1.gz
	rm -f $(DESTDIR)$(docdir)/$(APP)/changelog
	rm -f $(DESTDIR)$(docdir)/$(APP)/TODO
	rm -f $(DESTDIR)$(docdir)/$(APP)/AUTHORS
	rm -f $(DESTDIR)$(docdir)/$(APP)/NEWS
	rm -f $(DESTDIR)$(docdir)/$(APP)/README
	rm -f $(DESTDIR)$(docdir)/$(APP)/FAQ
	rm -f $(DESTDIR)$(docdir)/$(APP)/COPYING
	rm -f $(DESTDIR)$(docdir)/$(APP)/BUGS
	rm -f $(DESTDIR)$(docdir)/$(APP)/INSTALL
	rm -f $(DESTDIR)$(docdir)/$(APP)/config
	rm -f $(DESTDIR)$(datadir)/$(APP)/atari/newdesk.inf
	rm -f $(DESTDIR)$(datadir)/$(APP)/atari/mmusetup.cnf
	rm -f $(DESTDIR)$(datadir)/$(APP)/atari/hostfs/bdconfig.sys
	rm -f $(DESTDIR)$(datadir)/$(APP)/atari/hostfs/README
	rm -f $(DESTDIR)$(datadir)/$(APP)/atari/network/eth0-config.sh
	rm -f $(DESTDIR)$(datadir)/$(APP)/atari/network/README
	rm -f $(DESTDIR)$(datadir)/$(APP)/arabridge
	rm -f $(DESTDIR)$(datadir)/$(APP)/floppy.sh
	rm -f $(DESTDIR)$(datadir)/$(APP)/atari/tools/README
	rm -f $(DESTDIR)$(datadir)/$(APP)/atari/tools/pc101us.kbd.bz2
	rm -f $(DESTDIR)$(datadir)/$(APP)/atari/sound/README
	rmdir $(DESTDIR)$(datadir)/$(APP)/atari/hostfs
	rmdir $(DESTDIR)$(datadir)/$(APP)/atari/nfcdrom
	rmdir $(DESTDIR)$(datadir)/$(APP)/atari/nfjpeg
	rmdir $(DESTDIR)$(datadir)/$(APP)/atari/nfosmesa
	rmdir $(DESTDIR)$(datadir)/$(APP)/atari/network
	rmdir $(DESTDIR)$(datadir)/$(APP)/atari/tools
	rmdir $(DESTDIR)$(datadir)/$(APP)/atari/sound
	rmdir $(DESTDIR)$(datadir)/$(APP)/atari
	rmdir $(DESTDIR)$(datadir)/$(APP)
	rmdir $(DESTDIR)$(docdir)/$(APP)

mostlyclean:
	rm -f $(APP) $(TAPIF) $(APP).1.gz $(APP)-jit.1.gz $(APP)-mmu.1.gz $(APP_IFC).1.gz $(OBJ_DIR)/* core* *.core *~ *.bak

clean: mostlyclean
	rm -f cpuemu.cpp cpudefs.cpp cputmp*.s cpufast*.s cpustbl.cpp cputbl.h newcpu.s memory.s compemu.cpp compstbl.cpp comptbl.h

distclean: clean
	rm -rf $(OBJ_DIR)
	rm -f Makefile
	rm -f config.cache config.log config.status config.h
	rm -f cmos aranymtest.rc
	rm -rf autom4te.cache

mrproper: distclean
	rm -rf $(srcdir)/aclocal.m4 $(srcdir)/configure $(srcdir)/config.h.in

bindistdirs:
	$(SHELL) $(srcdir)/mkinstalldirs tmpdist tmpdist$(bindir) tmpdist$(man1dir) tmpdist$(datadir)/$(APP) tmpdist$(datadir)/$(APP)/atari tmpdist$(datadir)/$(APP)/atari/hostfs tmpdist$(datadir)/$(APP)/atari/nfcdrom tmpdist$(datadir)/$(APP)/atari/nfjpeg tmpdist$(datadir)/$(APP)/atari/nfosmesa tmpdist$(datadir)/$(APP)/atari/network tmpdist$(datadir)/$(APP)/atari/tools tmpdist$(datadir)/$(APP)/atari/sound tmpdist$(docdir)/$(APP)

bindist: $(APP) $(TAPIF) $(APP).1.gz $(APP)-jit.1.gz $(APP)-mmu.1.gz $(APP_IFC).1.gz bindistdirs
	$(INSTALL_PROGRAM) $(APP) tmpdist$(bindir)/$(APP)
	if [ "x$(APP_IFC)" = "x$(TAPIF)" ]; then \
	$(INSTALL_PROGRAM) $(APP_IFC) tmpdist$(bindir)/$(APP_IFC);\
	$(INSTALL_DATA) $(APP_IFC).1.gz tmpdist$(man1dir)/$(APP_IFC).1.gz ;\
	fi
	$(INSTALL_DATA) $(APP).1.gz tmpdist$(man1dir)/$(APP).1.gz
	$(INSTALL_DATA) $(APP)-jit.1.gz tmpdist$(man1dir)/$(APP)-jit.1.gz
	$(INSTALL_DATA) $(APP)-mmu.1.gz tmpdist$(man1dir)/$(APP)-mmu.1.gz
	$(INSTALL_DATA) $(srcdir)/../../ChangeLog tmpdist$(docdir)/$(APP)/changelog
	$(INSTALL_DATA) $(srcdir)/../../TODO tmpdist$(docdir)/$(APP)/TODO
	$(INSTALL_DATA) $(srcdir)/../../AUTHORS tmpdist$(docdir)/$(APP)/AUTHORS
	$(INSTALL_DATA) $(srcdir)/../../NEWS tmpdist$(docdir)/$(APP)/NEWS
	$(INSTALL_DATA) $(srcdir)/../../README tmpdist$(docdir)/$(APP)/README
	$(INSTALL_DATA) $(srcdir)/../../FAQ tmpdist$(docdir)/$(APP)/FAQ
	$(INSTALL_DATA) $(srcdir)/../../COPYING tmpdist$(docdir)/$(APP)/COPYING
	$(INSTALL_DATA) $(srcdir)/../../BUGS tmpdist$(docdir)/$(APP)/BUGS
	$(INSTALL_DATA) $(srcdir)/../../INSTALL tmpdist$(docdir)/$(APP)/INSTALL	
	$(INSTALL_DATA) $(srcdir)/../../doc/config tmpdist$(docdir)/$(APP)/config
	$(INSTALL_DATA) $(srcdir)/../../atari/newdesk.inf tmpdist$(datadir)/$(APP)/atari/newdesk.inf
	$(INSTALL_DATA) $(srcdir)/../../atari/mmusetup.cnf tmpdist$(datadir)/$(APP)/atari/mmusetup.cnf
	$(INSTALL_DATA) $(srcdir)/../../atari/hostfs/bdconfig.sys tmpdist$(datadir)/$(APP)/atari/hostfs/bdconfig.sys
	$(INSTALL_DATA) $(srcdir)/../../atari/hostfs/README tmpdist$(datadir)/$(APP)/atari/hostfs/README
	$(INSTALL_DATA) $(srcdir)/../../atari/network/ethernet/nfeth-config/eth0-config.sh tmpdist$(datadir)/$(APP)/atari/network/eth0-config.sh
	$(INSTALL_DATA) $(srcdir)/../../atari/network/ethernet/README tmpdist$(datadir)/$(APP)/atari/network/README
	$(INSTALL) $(srcdir)/../../tools/arabridge tmpdist$(datadir)/$(APP)/arabridge
	$(INSTALL) $(srcdir)/../../tools/floppy.sh tmpdist$(datadir)/$(APP)/floppy.sh
	$(INSTALL_DATA) $(srcdir)/../../atari/tools/README tmpdist$(datadir)/$(APP)/atari/tools/README
	$(INSTALL_DATA) $(srcdir)/../../atari/tools/pc101us.kbd.bz2 tmpdist$(datadir)/$(APP)/atari/tools/pc101us.kbd.bz2
	$(INSTALL_DATA) $(srcdir)/../../atari/sound/README tmpdist$(datadir)/$(APP)/atari/sound/README
	chmod -R a+r tmpdist
	cd tmpdist && GZIP=--best tar chozf ../$(APP).tar.gz *
	rm -rf tmpdist

devdist: mrproper 
	cd $(srcdir)/../../../ && GZIP=--best tar chozf $(APP).tar.gz aranym

dist: distclean
	cd $(srcdir)/../../../ && GZIP=--best tar chozf $(APP).tar.gz --exclude=autogen.sh --exclude=CVS --exclude=.cvsignore aranym

depend dep:
	makedepend $(CPPFLAGS) $(DEFS) -Y. $(addprefix $(srcdir)/,$(SRCS)) -p$(OBJ_DIR)/ 2>/dev/null
	{ \
	sed -n '1,/^# DO NOT DELETE THIS LINE -- make depend depends on it./p' < Makefile; \
	sed '1,/^# DO NOT DELETE THIS LINE -- make depend depends on it./d' < Makefile | sed 's=^$(OBJ_DIR)/[^:]*/=$(OBJ_DIR)/='; \
	} > Makefile.new
	mv Makefile.new Makefile

$(OBJ_DIR)/%.o : %.c
	$(CC) $(CPPFLAGS) $(DEFS) $(WFLAGS) $(CFLAGS) -c $< -o $@
$(OBJ_DIR)/%.o : %.m
	$(CC) $(CPPFLAGS) $(DEFS) $(WFLAGS) $(CFLAGS) -c $< -o $@
$(OBJ_DIR)/%.o : %.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) $(DBGSP) $(WFLAGS) $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/%.o : %.M
	$(CXX) $(CPPFLAGS) $(DEFS) $(DBGSP) $(WFLAGS) $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/%.o : %.s
	$(CXX) $(CPPFLAGS) $(DEFS) $(CFLAGS) -c $< -o $@

$(OBJ_DIR)/cpuopti: $(OBJ_DIR)/cpuopti.o
	$(CC) $(LDFLAGS) -o $(OBJ_DIR)/cpuopti $(OBJ_DIR)/cpuopti.o
$(OBJ_DIR)/build68k: $(OBJ_DIR)/build68k.o
	$(CC) $(LDFLAGS) -o $(OBJ_DIR)/build68k $(OBJ_DIR)/build68k.o
$(OBJ_DIR)/gencpu: $(OBJ_DIR)/gencpu.o $(OBJ_DIR)/readcpu.o $(OBJ_DIR)/cpudefs.o
	$(CXX) $(LDFLAGS) -o $(OBJ_DIR)/gencpu $(OBJ_DIR)/gencpu.o $(OBJ_DIR)/readcpu.o $(OBJ_DIR)/cpudefs.o
$(OBJ_DIR)/gencomp: $(OBJ_DIR)/gencomp.o $(OBJ_DIR)/readcpu.o $(OBJ_DIR)/cpudefs.o
	$(CXX) $(LDFLAGS) -o $(OBJ_DIR)/gencomp $(OBJ_DIR)/gencomp.o $(OBJ_DIR)/readcpu.o $(OBJ_DIR)/cpudefs.o

cpudefs.cpp: $(OBJ_DIR)/build68k ../uae_cpu/table68k
	$(OBJ_DIR)/build68k <$(srcdir)/../uae_cpu/table68k >cpudefs.cpp
cpustbl.cpp: cpuemu.cpp 
cpustbl_nf.cpp: cpustbl.cpp
compstbl.cpp: compemu.cpp
cputbl.h: cpuemu.cpp
comptbl.h: compemu.cpp

cpuemu.cpp: $(OBJ_DIR)/gencpu
	$(OBJ_DIR)/gencpu

compemu.cpp: $(OBJ_DIR)/gencomp
	$(OBJ_DIR)/gencomp

$(OBJ_DIR)/cpustbl_nf.o: cpustbl.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) $(CXXFLAGS) -DNOFLAGS -c $< -o $@

$(OBJ_DIR)/compemu_support.o: compemu_support.cpp comptbl.h codegen_x86.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/cpuemu1.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_1 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu2.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_2 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu3.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_3 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu4.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_4 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu5.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_5 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu6.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_6 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu7.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_7 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu8.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_8 $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/cpuemu1_nf.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_1 -DNOFLAGS $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu2_nf.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_2 -DNOFLAGS $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu3_nf.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_3 -DNOFLAGS $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu4_nf.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_4 -DNOFLAGS $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu5_nf.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_5 -DNOFLAGS $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu6_nf.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_6 -DNOFLAGS $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu7_nf.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_7 -DNOFLAGS $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/cpuemu8_nf.o: cpuemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_8 -DNOFLAGS $(CXXFLAGS) -c $< -o $@

$(OBJ_DIR)/compemu1.o: compemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_1 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/compemu2.o: compemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_2 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/compemu3.o: compemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_3 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/compemu4.o: compemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_4 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/compemu5.o: compemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_5 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/compemu6.o: compemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_6 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/compemu7.o: compemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_7 $(CXXFLAGS) -c $< -o $@
$(OBJ_DIR)/compemu8.o: compemu.cpp
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_8 $(CXXFLAGS) -c $< -o $@

cpufast.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -S $(CXXFLAGS) $< -o cputmp.s
	$(OBJ_DIR)/cpuopti <cputmp.s >$@ || mv cputmp.s $@
	rm -f cputmp.s
cpufast1.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_1 -S $(CXXFLAGS) $< -o cputmp1.s
	$(OBJ_DIR)/cpuopti <cputmp1.s >$@ || mv cputmp1.s $@
	rm -f cputmp1.s
cpufast2.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_2 -S $(CXXFLAGS) $< -o cputmp2.s
	$(OBJ_DIR)/cpuopti <cputmp2.s >$@ || mv cputmp2.s $@
	rm -f cputmp2.s
cpufast3.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_3 -S $(CXXFLAGS) $< -o cputmp3.s
	$(OBJ_DIR)/cpuopti <cputmp3.s >$@ || mv cputmp3.s $@
	rm -f cputmp3.s
cpufast4.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_4 -S $(CXXFLAGS) $< -o cputmp4.s
	$(OBJ_DIR)/cpuopti <cputmp4.s >$@ || mv cputmp4.s $@
	rm -f cputmp4.s
cpufast5.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_5 -S $(CXXFLAGS) $< -o cputmp5.s
	$(OBJ_DIR)/cpuopti <cputmp5.s >$@ || mv cputmp5.s $@
	rm -f cputmp5.s
cpufast6.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_6 -S $(CXXFLAGS) $< -o cputmp6.s
	$(OBJ_DIR)/cpuopti <cputmp6.s >$@ || mv cputmp6.s $@
	rm -f cputmp6.s
cpufast7.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_7 -S $(CXXFLAGS) $< -o cputmp7.s
	$(OBJ_DIR)/cpuopti <cputmp7.s >$@ || mv cputmp7.s $@
	rm -f cputmp7.s
cpufast8.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_8 -S $(CXXFLAGS) $< -o cputmp8.s
	$(OBJ_DIR)/cpuopti <cputmp8.s >$@ || mv cputmp8.s $@
	rm -f cputmp8.s

cpufast_nf.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DNOFLAGS -S $(CXXFLAGS) $< -o cputmp.s
	$(OBJ_DIR)/cpuopti <cputmp.s >$@ || mv cputmp.s $@
	rm -f cputmp.s
cpufast1_nf.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_1 -DNOFLAGS -S $(CXXFLAGS) $< -o cputmp1.s
	$(OBJ_DIR)/cpuopti <cputmp1.s >$@ || mv cputmp1.s $@
	rm -f cputmp1.s
cpufast2_nf.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_2 -DNOFLAGS -S $(CXXFLAGS) $< -o cputmp2.s
	$(OBJ_DIR)/cpuopti <cputmp2.s >$@ || mv cputmp2.s $@
	rm -f cputmp2.s
cpufast3_nf.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_3 -DNOFLAGS -S $(CXXFLAGS) $< -o cputmp3.s
	$(OBJ_DIR)/cpuopti <cputmp3.s >$@ || mv cputmp3.s $@
	rm -f cputmp3.s
cpufast4_nf.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_4 -DNOFLAGS -S $(CXXFLAGS) $< -o cputmp4.s
	$(OBJ_DIR)/cpuopti <cputmp4.s >$@ || mv cputmp4.s $@
	rm -f cputmp4.s
cpufast5_nf.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_5 -DNOFLAGS -S $(CXXFLAGS) $< -o cputmp5.s
	$(OBJ_DIR)/cpuopti <cputmp5.s >$@ || mv cputmp5.s $@
	rm -f cputmp5.s
cpufast6_nf.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_6 -DNOFLAGS -S $(CXXFLAGS) $< -o cputmp6.s
	$(OBJ_DIR)/cpuopti <cputmp6.s >$@ || mv cputmp6.s $@
	rm -f cputmp6.s
cpufast7_nf.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_7 -DNOFLAGS -S $(CXXFLAGS) $< -o cputmp7.s
	$(OBJ_DIR)/cpuopti <cputmp7.s >$@ || mv cputmp7.s $@
	rm -f cputmp7.s
cpufast8_nf.s: cpuemu.cpp $(OBJ_DIR)/cpuopti
	$(CXX) $(CPPFLAGS) $(DEFS) -DPART_8 -DNOFLAGS -S $(CXXFLAGS) $< -o cputmp8.s
	$(OBJ_DIR)/cpuopti <cputmp8.s >$@ || mv cputmp8.s $@
	rm -f cputmp8.s

# For tests
newcpu.s: ../uae_cpu/newcpu.cpp
	$(CXX) -fverbose-asm $(CPPFLAGS) $(DEFS) -S $(CXXFLAGS) $(srcdir)/../uae_cpu/newcpu.cpp -o newcpu.s

memory.s: ../uae_cpu/memory.cpp
	$(CXX) -fverbose-asm $(CPPFLAGS) $(DEFS) -S $(CXXFLAGS) $(srcdir)/../uae_cpu/memory.cpp -o memory.s

$(APP_IFC): aratapif.c
	$(CC) $(LDFLAGS) $(CFLAGS) -o $(APP_IFC) -DHAVE_AFINET $(srcdir)/aratapif.c

$(APP).1.gz: ../../doc/$(APP).1
	gzip -9 -c $(srcdir)/../../doc/$(APP).1 > $(APP).1.gz

$(APP)-jit.1.gz: ../../doc/$(APP)-jit.1
	gzip -9 -c $(srcdir)/../../doc/$(APP)-jit.1 > $(APP)-jit.1.gz

$(APP)-mmu.1.gz: ../../doc/$(APP)-mmu.1
	gzip -9 -c $(srcdir)/../../doc/$(APP)-mmu.1 > $(APP)-mmu.1.gz

$(APP_IFC).1.gz: ../../doc/$(APP_IFC).1
	gzip -9 -c $(srcdir)/../../doc/$(APP_IFC).1 > $(APP_IFC).1.gz

#-------------------------------------------------------------------------
# DO NOT DELETE THIS LINE -- make depend depends on it.
