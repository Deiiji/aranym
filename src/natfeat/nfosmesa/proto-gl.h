/* Generated by proto-gen.pl from /usr/local/include/GL/gl.h */

	 void  glClearIndex(Uint32 ctx, GLfloat c );
	 void  glClearColor(Uint32 ctx, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
	 void  glClear(Uint32 ctx, GLbitfield mask );
	 void  glIndexMask(Uint32 ctx, GLuint mask );
	 void  glColorMask(Uint32 ctx, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
	 void  glAlphaFunc(Uint32 ctx, GLenum func, GLclampf ref );
	 void  glBlendFunc(Uint32 ctx, GLenum sfactor, GLenum dfactor );
	 void  glLogicOp(Uint32 ctx, GLenum opcode );
	 void  glCullFace(Uint32 ctx, GLenum mode );
	 void  glFrontFace(Uint32 ctx, GLenum mode );
	 void  glPointSize(Uint32 ctx, GLfloat size );
	 void  glLineWidth(Uint32 ctx, GLfloat width );
	 void  glLineStipple(Uint32 ctx, GLint factor, GLushort pattern );
	 void  glPolygonMode(Uint32 ctx, GLenum face, GLenum mode );
	 void  glPolygonOffset(Uint32 ctx, GLfloat factor, GLfloat units );
	 void  glPolygonStipple(Uint32 ctx, const GLubyte *mask );
	 void  glGetPolygonStipple(Uint32 ctx, GLubyte *mask );
	 void  glEdgeFlag(Uint32 ctx, GLboolean flag );
	 void  glEdgeFlagv(Uint32 ctx, const GLboolean *flag );
	 void  glScissor(Uint32 ctx, GLint x, GLint y, GLsizei width, GLsizei height);
	 void  glClipPlane(Uint32 ctx, GLenum plane, const GLdouble *equation );
	 void  glGetClipPlane(Uint32 ctx, GLenum plane, GLdouble *equation );
	 void  glDrawBuffer(Uint32 ctx, GLenum mode );
	 void  glReadBuffer(Uint32 ctx, GLenum mode );
	 void  glEnable(Uint32 ctx, GLenum cap );
	 void  glDisable(Uint32 ctx, GLenum cap );
	 GLboolean  glIsEnabled(Uint32 ctx, GLenum cap );
	 void  glEnableClientState(Uint32 ctx, GLenum cap );
	 void  glDisableClientState(Uint32 ctx, GLenum cap );
	 void  glGetBooleanv(Uint32 ctx, GLenum pname, GLboolean *params );
	 void  glGetDoublev(Uint32 ctx, GLenum pname, GLdouble *params );
	 void  glGetFloatv(Uint32 ctx, GLenum pname, GLfloat *params );
	 void  glGetIntegerv(Uint32 ctx, GLenum pname, GLint *params );
	 void  glPushAttrib(Uint32 ctx, GLbitfield mask );
	 void  glPopAttrib(Uint32 ctx);
	 void  glPushClientAttrib(Uint32 ctx, GLbitfield mask );
	 void  glPopClientAttrib(Uint32 ctx);
	 GLint  glRenderMode(Uint32 ctx, GLenum mode );
	 GLenum  glGetError(Uint32 ctx);
	 const GLubyte*  glGetString(Uint32 ctx, GLenum name );
	 void  glFinish(Uint32 ctx);
	 void  glFlush(Uint32 ctx);
	 void  glHint(Uint32 ctx, GLenum target, GLenum mode );
	 void  glClearDepth(Uint32 ctx, GLclampd depth );
	 void  glDepthFunc(Uint32 ctx, GLenum func );
	 void  glDepthMask(Uint32 ctx, GLboolean flag );
	 void  glDepthRange(Uint32 ctx, GLclampd near_val, GLclampd far_val );
	 void  glClearAccum(Uint32 ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
	 void  glAccum(Uint32 ctx, GLenum op, GLfloat value );
	 void  glMatrixMode(Uint32 ctx, GLenum mode );
	 void  glOrtho(Uint32 ctx, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
	 void  glFrustum(Uint32 ctx, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
	 void  glViewport(Uint32 ctx, GLint x, GLint y, GLsizei width, GLsizei height );
	 void  glPushMatrix(Uint32 ctx);
	 void  glPopMatrix(Uint32 ctx);
	 void  glLoadIdentity(Uint32 ctx);
	 void  glLoadMatrixd(Uint32 ctx, const GLdouble *m );
	 void  glLoadMatrixf(Uint32 ctx, const GLfloat *m );
	 void  glMultMatrixd(Uint32 ctx, const GLdouble *m );
	 void  glMultMatrixf(Uint32 ctx, const GLfloat *m );
	 void  glRotated(Uint32 ctx, GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
	 void  glRotatef(Uint32 ctx, GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
	 void  glScaled(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z );
	 void  glScalef(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z );
	 void  glTranslated(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z );
	 void  glTranslatef(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z );
	 GLboolean  glIsList(Uint32 ctx, GLuint list );
	 void  glDeleteLists(Uint32 ctx, GLuint list, GLsizei range );
	 GLuint  glGenLists(Uint32 ctx, GLsizei range );
	 void  glNewList(Uint32 ctx, GLuint list, GLenum mode );
	 void  glEndList(Uint32 ctx);
	 void  glCallList(Uint32 ctx, GLuint list );
	 void  glCallLists(Uint32 ctx, GLsizei n, GLenum type, const GLvoid *lists );
	 void  glListBase(Uint32 ctx, GLuint base );
	 void  glBegin(Uint32 ctx, GLenum mode );
	 void  glEnd(Uint32 ctx);
	 void  glVertex2d(Uint32 ctx, GLdouble x, GLdouble y );
	 void  glVertex2f(Uint32 ctx, GLfloat x, GLfloat y );
	 void  glVertex2i(Uint32 ctx, GLint x, GLint y );
	 void  glVertex2s(Uint32 ctx, GLshort x, GLshort y );
	 void  glVertex3d(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z );
	 void  glVertex3f(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z );
	 void  glVertex3i(Uint32 ctx, GLint x, GLint y, GLint z );
	 void  glVertex3s(Uint32 ctx, GLshort x, GLshort y, GLshort z );
	 void  glVertex4d(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
	 void  glVertex4f(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
	 void  glVertex4i(Uint32 ctx, GLint x, GLint y, GLint z, GLint w );
	 void  glVertex4s(Uint32 ctx, GLshort x, GLshort y, GLshort z, GLshort w );
	 void  glVertex2dv(Uint32 ctx, const GLdouble *v );
	 void  glVertex2fv(Uint32 ctx, const GLfloat *v );
	 void  glVertex2iv(Uint32 ctx, const GLint *v );
	 void  glVertex2sv(Uint32 ctx, const GLshort *v );
	 void  glVertex3dv(Uint32 ctx, const GLdouble *v );
	 void  glVertex3fv(Uint32 ctx, const GLfloat *v );
	 void  glVertex3iv(Uint32 ctx, const GLint *v );
	 void  glVertex3sv(Uint32 ctx, const GLshort *v );
	 void  glVertex4dv(Uint32 ctx, const GLdouble *v );
	 void  glVertex4fv(Uint32 ctx, const GLfloat *v );
	 void  glVertex4iv(Uint32 ctx, const GLint *v );
	 void  glVertex4sv(Uint32 ctx, const GLshort *v );
	 void  glNormal3b(Uint32 ctx, GLbyte nx, GLbyte ny, GLbyte nz );
	 void  glNormal3d(Uint32 ctx, GLdouble nx, GLdouble ny, GLdouble nz );
	 void  glNormal3f(Uint32 ctx, GLfloat nx, GLfloat ny, GLfloat nz );
	 void  glNormal3i(Uint32 ctx, GLint nx, GLint ny, GLint nz );
	 void  glNormal3s(Uint32 ctx, GLshort nx, GLshort ny, GLshort nz );
	 void  glNormal3bv(Uint32 ctx, const GLbyte *v );
	 void  glNormal3dv(Uint32 ctx, const GLdouble *v );
	 void  glNormal3fv(Uint32 ctx, const GLfloat *v );
	 void  glNormal3iv(Uint32 ctx, const GLint *v );
	 void  glNormal3sv(Uint32 ctx, const GLshort *v );
	 void  glIndexd(Uint32 ctx, GLdouble c );
	 void  glIndexf(Uint32 ctx, GLfloat c );
	 void  glIndexi(Uint32 ctx, GLint c );
	 void  glIndexs(Uint32 ctx, GLshort c );
	 void  glIndexub(Uint32 ctx, GLubyte c );
	 void  glIndexdv(Uint32 ctx, const GLdouble *c );
	 void  glIndexfv(Uint32 ctx, const GLfloat *c );
	 void  glIndexiv(Uint32 ctx, const GLint *c );
	 void  glIndexsv(Uint32 ctx, const GLshort *c );
	 void  glIndexubv(Uint32 ctx, const GLubyte *c );
	 void  glColor3b(Uint32 ctx, GLbyte red, GLbyte green, GLbyte blue );
	 void  glColor3d(Uint32 ctx, GLdouble red, GLdouble green, GLdouble blue );
	 void  glColor3f(Uint32 ctx, GLfloat red, GLfloat green, GLfloat blue );
	 void  glColor3i(Uint32 ctx, GLint red, GLint green, GLint blue );
	 void  glColor3s(Uint32 ctx, GLshort red, GLshort green, GLshort blue );
	 void  glColor3ub(Uint32 ctx, GLubyte red, GLubyte green, GLubyte blue );
	 void  glColor3ui(Uint32 ctx, GLuint red, GLuint green, GLuint blue );
	 void  glColor3us(Uint32 ctx, GLushort red, GLushort green, GLushort blue );
	 void  glColor4b(Uint32 ctx, GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
	 void  glColor4d(Uint32 ctx, GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
	 void  glColor4f(Uint32 ctx, GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
	 void  glColor4i(Uint32 ctx, GLint red, GLint green, GLint blue, GLint alpha );
	 void  glColor4s(Uint32 ctx, GLshort red, GLshort green, GLshort blue, GLshort alpha );
	 void  glColor4ub(Uint32 ctx, GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
	 void  glColor4ui(Uint32 ctx, GLuint red, GLuint green, GLuint blue, GLuint alpha );
	 void  glColor4us(Uint32 ctx, GLushort red, GLushort green, GLushort blue, GLushort alpha );
	 void  glColor3bv(Uint32 ctx, const GLbyte *v );
	 void  glColor3dv(Uint32 ctx, const GLdouble *v );
	 void  glColor3fv(Uint32 ctx, const GLfloat *v );
	 void  glColor3iv(Uint32 ctx, const GLint *v );
	 void  glColor3sv(Uint32 ctx, const GLshort *v );
	 void  glColor3ubv(Uint32 ctx, const GLubyte *v );
	 void  glColor3uiv(Uint32 ctx, const GLuint *v );
	 void  glColor3usv(Uint32 ctx, const GLushort *v );
	 void  glColor4bv(Uint32 ctx, const GLbyte *v );
	 void  glColor4dv(Uint32 ctx, const GLdouble *v );
	 void  glColor4fv(Uint32 ctx, const GLfloat *v );
	 void  glColor4iv(Uint32 ctx, const GLint *v );
	 void  glColor4sv(Uint32 ctx, const GLshort *v );
	 void  glColor4ubv(Uint32 ctx, const GLubyte *v );
	 void  glColor4uiv(Uint32 ctx, const GLuint *v );
	 void  glColor4usv(Uint32 ctx, const GLushort *v );
	 void  glTexCoord1d(Uint32 ctx, GLdouble s );
	 void  glTexCoord1f(Uint32 ctx, GLfloat s );
	 void  glTexCoord1i(Uint32 ctx, GLint s );
	 void  glTexCoord1s(Uint32 ctx, GLshort s );
	 void  glTexCoord2d(Uint32 ctx, GLdouble s, GLdouble t );
	 void  glTexCoord2f(Uint32 ctx, GLfloat s, GLfloat t );
	 void  glTexCoord2i(Uint32 ctx, GLint s, GLint t );
	 void  glTexCoord2s(Uint32 ctx, GLshort s, GLshort t );
	 void  glTexCoord3d(Uint32 ctx, GLdouble s, GLdouble t, GLdouble r );
	 void  glTexCoord3f(Uint32 ctx, GLfloat s, GLfloat t, GLfloat r );
	 void  glTexCoord3i(Uint32 ctx, GLint s, GLint t, GLint r );
	 void  glTexCoord3s(Uint32 ctx, GLshort s, GLshort t, GLshort r );
	 void  glTexCoord4d(Uint32 ctx, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
	 void  glTexCoord4f(Uint32 ctx, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
	 void  glTexCoord4i(Uint32 ctx, GLint s, GLint t, GLint r, GLint q );
	 void  glTexCoord4s(Uint32 ctx, GLshort s, GLshort t, GLshort r, GLshort q );
	 void  glTexCoord1dv(Uint32 ctx, const GLdouble *v );
	 void  glTexCoord1fv(Uint32 ctx, const GLfloat *v );
	 void  glTexCoord1iv(Uint32 ctx, const GLint *v );
	 void  glTexCoord1sv(Uint32 ctx, const GLshort *v );
	 void  glTexCoord2dv(Uint32 ctx, const GLdouble *v );
	 void  glTexCoord2fv(Uint32 ctx, const GLfloat *v );
	 void  glTexCoord2iv(Uint32 ctx, const GLint *v );
	 void  glTexCoord2sv(Uint32 ctx, const GLshort *v );
	 void  glTexCoord3dv(Uint32 ctx, const GLdouble *v );
	 void  glTexCoord3fv(Uint32 ctx, const GLfloat *v );
	 void  glTexCoord3iv(Uint32 ctx, const GLint *v );
	 void  glTexCoord3sv(Uint32 ctx, const GLshort *v );
	 void  glTexCoord4dv(Uint32 ctx, const GLdouble *v );
	 void  glTexCoord4fv(Uint32 ctx, const GLfloat *v );
	 void  glTexCoord4iv(Uint32 ctx, const GLint *v );
	 void  glTexCoord4sv(Uint32 ctx, const GLshort *v );
	 void  glRasterPos2d(Uint32 ctx, GLdouble x, GLdouble y );
	 void  glRasterPos2f(Uint32 ctx, GLfloat x, GLfloat y );
	 void  glRasterPos2i(Uint32 ctx, GLint x, GLint y );
	 void  glRasterPos2s(Uint32 ctx, GLshort x, GLshort y );
	 void  glRasterPos3d(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z );
	 void  glRasterPos3f(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z );
	 void  glRasterPos3i(Uint32 ctx, GLint x, GLint y, GLint z );
	 void  glRasterPos3s(Uint32 ctx, GLshort x, GLshort y, GLshort z );
	 void  glRasterPos4d(Uint32 ctx, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
	 void  glRasterPos4f(Uint32 ctx, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
	 void  glRasterPos4i(Uint32 ctx, GLint x, GLint y, GLint z, GLint w );
	 void  glRasterPos4s(Uint32 ctx, GLshort x, GLshort y, GLshort z, GLshort w );
	 void  glRasterPos2dv(Uint32 ctx, const GLdouble *v );
	 void  glRasterPos2fv(Uint32 ctx, const GLfloat *v );
	 void  glRasterPos2iv(Uint32 ctx, const GLint *v );
	 void  glRasterPos2sv(Uint32 ctx, const GLshort *v );
	 void  glRasterPos3dv(Uint32 ctx, const GLdouble *v );
	 void  glRasterPos3fv(Uint32 ctx, const GLfloat *v );
	 void  glRasterPos3iv(Uint32 ctx, const GLint *v );
	 void  glRasterPos3sv(Uint32 ctx, const GLshort *v );
	 void  glRasterPos4dv(Uint32 ctx, const GLdouble *v );
	 void  glRasterPos4fv(Uint32 ctx, const GLfloat *v );
	 void  glRasterPos4iv(Uint32 ctx, const GLint *v );
	 void  glRasterPos4sv(Uint32 ctx, const GLshort *v );
	 void  glRectd(Uint32 ctx, GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
	 void  glRectf(Uint32 ctx, GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
	 void  glRecti(Uint32 ctx, GLint x1, GLint y1, GLint x2, GLint y2 );
	 void  glRects(Uint32 ctx, GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
	 void  glRectdv(Uint32 ctx, const GLdouble *v1, const GLdouble *v2 );
	 void  glRectfv(Uint32 ctx, const GLfloat *v1, const GLfloat *v2 );
	 void  glRectiv(Uint32 ctx, const GLint *v1, const GLint *v2 );
	 void  glRectsv(Uint32 ctx, const GLshort *v1, const GLshort *v2 );
	 void  glVertexPointer(Uint32 ctx, GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  glNormalPointer(Uint32 ctx, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  glColorPointer(Uint32 ctx, GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  glIndexPointer(Uint32 ctx, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  glTexCoordPointer(Uint32 ctx, GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	 void  glEdgeFlagPointer(Uint32 ctx, GLsizei stride, const GLvoid *ptr );
	 void  glGetPointerv(Uint32 ctx, GLenum pname, GLvoid **params );
	 void  glArrayElement(Uint32 ctx, GLint i );
	 void  glDrawArrays(Uint32 ctx, GLenum mode, GLint first, GLsizei count );
	 void  glDrawElements(Uint32 ctx, GLenum mode, GLsizei count, GLenum type, const GLvoid *indices );
	 void  glInterleavedArrays(Uint32 ctx, GLenum format, GLsizei stride, const GLvoid *pointer );
	 void  glShadeModel(Uint32 ctx, GLenum mode );
	 void  glLightf(Uint32 ctx, GLenum light, GLenum pname, GLfloat param );
	 void  glLighti(Uint32 ctx, GLenum light, GLenum pname, GLint param );
	 void  glLightfv(Uint32 ctx, GLenum light, GLenum pname, const GLfloat *params );
	 void  glLightiv(Uint32 ctx, GLenum light, GLenum pname, const GLint *params );
	 void  glGetLightfv(Uint32 ctx, GLenum light, GLenum pname, GLfloat *params );
	 void  glGetLightiv(Uint32 ctx, GLenum light, GLenum pname, GLint *params );
	 void  glLightModelf(Uint32 ctx, GLenum pname, GLfloat param );
	 void  glLightModeli(Uint32 ctx, GLenum pname, GLint param );
	 void  glLightModelfv(Uint32 ctx, GLenum pname, const GLfloat *params );
	 void  glLightModeliv(Uint32 ctx, GLenum pname, const GLint *params );
	 void  glMaterialf(Uint32 ctx, GLenum face, GLenum pname, GLfloat param );
	 void  glMateriali(Uint32 ctx, GLenum face, GLenum pname, GLint param );
	 void  glMaterialfv(Uint32 ctx, GLenum face, GLenum pname, const GLfloat *params );
	 void  glMaterialiv(Uint32 ctx, GLenum face, GLenum pname, const GLint *params );
	 void  glGetMaterialfv(Uint32 ctx, GLenum face, GLenum pname, GLfloat *params );
	 void  glGetMaterialiv(Uint32 ctx, GLenum face, GLenum pname, GLint *params );
	 void  glColorMaterial(Uint32 ctx, GLenum face, GLenum mode );
	 void  glPixelZoom(Uint32 ctx, GLfloat xfactor, GLfloat yfactor );
	 void  glPixelStoref(Uint32 ctx, GLenum pname, GLfloat param );
	 void  glPixelStorei(Uint32 ctx, GLenum pname, GLint param );
	 void  glPixelTransferf(Uint32 ctx, GLenum pname, GLfloat param );
	 void  glPixelTransferi(Uint32 ctx, GLenum pname, GLint param );
	 void  glPixelMapfv(Uint32 ctx, GLenum map, GLsizei mapsize, const GLfloat *values );
	 void  glPixelMapuiv(Uint32 ctx, GLenum map, GLsizei mapsize, const GLuint *values );
	 void  glPixelMapusv(Uint32 ctx, GLenum map, GLsizei mapsize, const GLushort *values );
	 void  glGetPixelMapfv(Uint32 ctx, GLenum map, GLfloat *values );
	 void  glGetPixelMapuiv(Uint32 ctx, GLenum map, GLuint *values );
	 void  glGetPixelMapusv(Uint32 ctx, GLenum map, GLushort *values );
	 void  glBitmap(Uint32 ctx, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap );
	 void  glReadPixels(Uint32 ctx, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels );
	 void  glDrawPixels(Uint32 ctx, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
	 void  glCopyPixels(Uint32 ctx, GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
	 void  glStencilFunc(Uint32 ctx, GLenum func, GLint ref, GLuint mask );
	 void  glStencilMask(Uint32 ctx, GLuint mask );
	 void  glStencilOp(Uint32 ctx, GLenum fail, GLenum zfail, GLenum zpass );
	 void  glClearStencil(Uint32 ctx, GLint s );
	 void  glTexGend(Uint32 ctx, GLenum coord, GLenum pname, GLdouble param );
	 void  glTexGenf(Uint32 ctx, GLenum coord, GLenum pname, GLfloat param );
	 void  glTexGeni(Uint32 ctx, GLenum coord, GLenum pname, GLint param );
	 void  glTexGendv(Uint32 ctx, GLenum coord, GLenum pname, const GLdouble *params );
	 void  glTexGenfv(Uint32 ctx, GLenum coord, GLenum pname, const GLfloat *params );
	 void  glTexGeniv(Uint32 ctx, GLenum coord, GLenum pname, const GLint *params );
	 void  glGetTexGendv(Uint32 ctx, GLenum coord, GLenum pname, GLdouble *params );
	 void  glGetTexGenfv(Uint32 ctx, GLenum coord, GLenum pname, GLfloat *params );
	 void  glGetTexGeniv(Uint32 ctx, GLenum coord, GLenum pname, GLint *params );
	 void  glTexEnvf(Uint32 ctx, GLenum target, GLenum pname, GLfloat param );
	 void  glTexEnvi(Uint32 ctx, GLenum target, GLenum pname, GLint param );
	 void  glTexEnvfv(Uint32 ctx, GLenum target, GLenum pname, const GLfloat *params );
	 void  glTexEnviv(Uint32 ctx, GLenum target, GLenum pname, const GLint *params );
	 void  glGetTexEnvfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params );
	 void  glGetTexEnviv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  glTexParameterf(Uint32 ctx, GLenum target, GLenum pname, GLfloat param );
	 void  glTexParameteri(Uint32 ctx, GLenum target, GLenum pname, GLint param );
	 void  glTexParameterfv(Uint32 ctx, GLenum target, GLenum pname, const GLfloat *params );
	 void  glTexParameteriv(Uint32 ctx, GLenum target, GLenum pname, const GLint *params );
	 void  glGetTexParameterfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params);
	 void  glGetTexParameteriv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  glGetTexLevelParameterfv(Uint32 ctx, GLenum target, GLint level, GLenum pname, GLfloat *params );
	 void  glGetTexLevelParameteriv(Uint32 ctx, GLenum target, GLint level, GLenum pname, GLint *params );
	 void  glTexImage1D(Uint32 ctx, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	 void  glTexImage2D(Uint32 ctx, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	 void  glGetTexImage(Uint32 ctx, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels );
	 void  glGenTextures(Uint32 ctx, GLsizei n, GLuint *textures );
	 void  glDeleteTextures(Uint32 ctx, GLsizei n, const GLuint *textures);
	 void  glBindTexture(Uint32 ctx, GLenum target, GLuint texture );
	 void  glPrioritizeTextures(Uint32 ctx, GLsizei n, const GLuint *textures, const GLclampf *priorities );
	 GLboolean  glAreTexturesResident(Uint32 ctx, GLsizei n, const GLuint *textures, GLboolean *residences );
	 GLboolean  glIsTexture(Uint32 ctx, GLuint texture );
	 void  glTexSubImage1D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels );
	 void  glTexSubImage2D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
	 void  glCopyTexImage1D(Uint32 ctx, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
	 void  glCopyTexImage2D(Uint32 ctx, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
	 void  glCopyTexSubImage1D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
	 void  glCopyTexSubImage2D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
	 void  glMap1d(Uint32 ctx, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
	 void  glMap1f(Uint32 ctx, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
	 void  glMap2d(Uint32 ctx, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
	 void  glMap2f(Uint32 ctx, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
	 void  glGetMapdv(Uint32 ctx, GLenum target, GLenum query, GLdouble *v );
	 void  glGetMapfv(Uint32 ctx, GLenum target, GLenum query, GLfloat *v );
	 void  glGetMapiv(Uint32 ctx, GLenum target, GLenum query, GLint *v );
	 void  glEvalCoord1d(Uint32 ctx, GLdouble u );
	 void  glEvalCoord1f(Uint32 ctx, GLfloat u );
	 void  glEvalCoord1dv(Uint32 ctx, const GLdouble *u );
	 void  glEvalCoord1fv(Uint32 ctx, const GLfloat *u );
	 void  glEvalCoord2d(Uint32 ctx, GLdouble u, GLdouble v );
	 void  glEvalCoord2f(Uint32 ctx, GLfloat u, GLfloat v );
	 void  glEvalCoord2dv(Uint32 ctx, const GLdouble *u );
	 void  glEvalCoord2fv(Uint32 ctx, const GLfloat *u );
	 void  glMapGrid1d(Uint32 ctx, GLint un, GLdouble u1, GLdouble u2 );
	 void  glMapGrid1f(Uint32 ctx, GLint un, GLfloat u1, GLfloat u2 );
	 void  glMapGrid2d(Uint32 ctx, GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
	 void  glMapGrid2f(Uint32 ctx, GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
	 void  glEvalPoint1(Uint32 ctx, GLint i );
	 void  glEvalPoint2(Uint32 ctx, GLint i, GLint j );
	 void  glEvalMesh1(Uint32 ctx, GLenum mode, GLint i1, GLint i2 );
	 void  glEvalMesh2(Uint32 ctx, GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
	 void  glFogf(Uint32 ctx, GLenum pname, GLfloat param );
	 void  glFogi(Uint32 ctx, GLenum pname, GLint param );
	 void  glFogfv(Uint32 ctx, GLenum pname, const GLfloat *params );
	 void  glFogiv(Uint32 ctx, GLenum pname, const GLint *params );
	 void  glFeedbackBuffer(Uint32 ctx, GLsizei size, GLenum type, GLfloat *buffer );
	 void  glPassThrough(Uint32 ctx, GLfloat token );
	 void  glSelectBuffer(Uint32 ctx, GLsizei size, GLuint *buffer );
	 void  glInitNames(Uint32 ctx);
	 void  glLoadName(Uint32 ctx, GLuint name );
	 void  glPushName(Uint32 ctx, GLuint name );
	 void  glPopName(Uint32 ctx);
/*
	 void  glDrawRangeElements(Uint32 ctx, GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices );
	 void  glTexImage3D(Uint32 ctx, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	 void  glTexSubImage3D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
	 void  glCopyTexSubImage3D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
	 void  glColorTable(Uint32 ctx, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table );
	 void  glColorSubTable(Uint32 ctx, GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data );
	 void  glColorTableParameteriv(Uint32 ctx,GLenum target, GLenum pname, const GLint *params);
	 void  glColorTableParameterfv(Uint32 ctx,GLenum target, GLenum pname, const GLfloat *params);
	 void  glCopyColorSubTable(Uint32 ctx, GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
	 void  glCopyColorTable(Uint32 ctx, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
	 void  glGetColorTable(Uint32 ctx, GLenum target, GLenum format, GLenum type, GLvoid *table );
	 void  glGetColorTableParameterfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params );
	 void  glGetColorTableParameteriv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  glBlendEquation(Uint32 ctx, GLenum mode );
	 void  glBlendColor(Uint32 ctx, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
	 void  glHistogram(Uint32 ctx, GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
	 void  glResetHistogram(Uint32 ctx, GLenum target );
	 void  glGetHistogram(Uint32 ctx, GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values );
	 void  glGetHistogramParameterfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params );
	 void  glGetHistogramParameteriv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  glMinmax(Uint32 ctx, GLenum target, GLenum internalformat, GLboolean sink );
	 void  glResetMinmax(Uint32 ctx, GLenum target );
	 void  glGetMinmax(Uint32 ctx, GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values );
	 void  glGetMinmaxParameterfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params );
	 void  glGetMinmaxParameteriv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  glConvolutionFilter1D(Uint32 ctx, GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image );
	 void  glConvolutionFilter2D(Uint32 ctx, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image );
	 void  glConvolutionParameterf(Uint32 ctx, GLenum target, GLenum pname, GLfloat params );
	 void  glConvolutionParameterfv(Uint32 ctx, GLenum target, GLenum pname, const GLfloat *params );
	 void  glConvolutionParameteri(Uint32 ctx, GLenum target, GLenum pname, GLint params );
	 void  glConvolutionParameteriv(Uint32 ctx, GLenum target, GLenum pname, const GLint *params );
	 void  glCopyConvolutionFilter1D(Uint32 ctx, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
	 void  glCopyConvolutionFilter2D(Uint32 ctx, GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
	 void  glGetConvolutionFilter(Uint32 ctx, GLenum target, GLenum format, GLenum type, GLvoid *image );
	 void  glGetConvolutionParameterfv(Uint32 ctx, GLenum target, GLenum pname, GLfloat *params );
	 void  glGetConvolutionParameteriv(Uint32 ctx, GLenum target, GLenum pname, GLint *params );
	 void  glSeparableFilter2D(Uint32 ctx, GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column );
	 void  glGetSeparableFilter(Uint32 ctx, GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span );
	 void  glActiveTexture(Uint32 ctx, GLenum texture );
	 void  glClientActiveTexture(Uint32 ctx, GLenum texture );
	 void  glCompressedTexImage1D(Uint32 ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data );
	 void  glCompressedTexImage2D(Uint32 ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data );
	 void  glCompressedTexImage3D(Uint32 ctx, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data );
	 void  glCompressedTexSubImage1D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data );
	 void  glCompressedTexSubImage2D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data );
	 void  glCompressedTexSubImage3D(Uint32 ctx, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data );
	 void  glGetCompressedTexImage(Uint32 ctx, GLenum target, GLint lod, GLvoid *img );
	 void  glMultiTexCoord1d(Uint32 ctx, GLenum target, GLdouble s );
	 void  glMultiTexCoord1dv(Uint32 ctx, GLenum target, const GLdouble *v );
	 void  glMultiTexCoord1f(Uint32 ctx, GLenum target, GLfloat s );
	 void  glMultiTexCoord1fv(Uint32 ctx, GLenum target, const GLfloat *v );
	 void  glMultiTexCoord1i(Uint32 ctx, GLenum target, GLint s );
	 void  glMultiTexCoord1iv(Uint32 ctx, GLenum target, const GLint *v );
	 void  glMultiTexCoord1s(Uint32 ctx, GLenum target, GLshort s );
	 void  glMultiTexCoord1sv(Uint32 ctx, GLenum target, const GLshort *v );
	 void  glMultiTexCoord2d(Uint32 ctx, GLenum target, GLdouble s, GLdouble t );
	 void  glMultiTexCoord2dv(Uint32 ctx, GLenum target, const GLdouble *v );
	 void  glMultiTexCoord2f(Uint32 ctx, GLenum target, GLfloat s, GLfloat t );
	 void  glMultiTexCoord2fv(Uint32 ctx, GLenum target, const GLfloat *v );
	 void  glMultiTexCoord2i(Uint32 ctx, GLenum target, GLint s, GLint t );
	 void  glMultiTexCoord2iv(Uint32 ctx, GLenum target, const GLint *v );
	 void  glMultiTexCoord2s(Uint32 ctx, GLenum target, GLshort s, GLshort t );
	 void  glMultiTexCoord2sv(Uint32 ctx, GLenum target, const GLshort *v );
	 void  glMultiTexCoord3d(Uint32 ctx, GLenum target, GLdouble s, GLdouble t, GLdouble r );
	 void  glMultiTexCoord3dv(Uint32 ctx, GLenum target, const GLdouble *v );
	 void  glMultiTexCoord3f(Uint32 ctx, GLenum target, GLfloat s, GLfloat t, GLfloat r );
	 void  glMultiTexCoord3fv(Uint32 ctx, GLenum target, const GLfloat *v );
	 void  glMultiTexCoord3i(Uint32 ctx, GLenum target, GLint s, GLint t, GLint r );
	 void  glMultiTexCoord3iv(Uint32 ctx, GLenum target, const GLint *v );
	 void  glMultiTexCoord3s(Uint32 ctx, GLenum target, GLshort s, GLshort t, GLshort r );
	 void  glMultiTexCoord3sv(Uint32 ctx, GLenum target, const GLshort *v );
	 void  glMultiTexCoord4d(Uint32 ctx, GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
	 void  glMultiTexCoord4dv(Uint32 ctx, GLenum target, const GLdouble *v );
	 void  glMultiTexCoord4f(Uint32 ctx, GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
	 void  glMultiTexCoord4fv(Uint32 ctx, GLenum target, const GLfloat *v );
	 void  glMultiTexCoord4i(Uint32 ctx, GLenum target, GLint s, GLint t, GLint r, GLint q );
	 void  glMultiTexCoord4iv(Uint32 ctx, GLenum target, const GLint *v );
	 void  glMultiTexCoord4s(Uint32 ctx, GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
	 void  glMultiTexCoord4sv(Uint32 ctx, GLenum target, const GLshort *v );
	 void  glLoadTransposeMatrixd(Uint32 ctx, const GLdouble m[16] );
	 void  glLoadTransposeMatrixf(Uint32 ctx, const GLfloat m[16] );
	 void  glMultTransposeMatrixd(Uint32 ctx, const GLdouble m[16] );
	 void  glMultTransposeMatrixf(Uint32 ctx, const GLfloat m[16] );
	 void  glSampleCoverage(Uint32 ctx, GLclampf value, GLboolean invert );
	 void  glActiveTextureARB(Uint32 ctx,GLenum texture);
	 void  glClientActiveTextureARB(Uint32 ctx,GLenum texture);
	 void  glMultiTexCoord1dARB(Uint32 ctx,GLenum target, GLdouble s);
	 void  glMultiTexCoord1dvARB(Uint32 ctx,GLenum target, const GLdouble *v);
	 void  glMultiTexCoord1fARB(Uint32 ctx,GLenum target, GLfloat s);
	 void  glMultiTexCoord1fvARB(Uint32 ctx,GLenum target, const GLfloat *v);
	 void  glMultiTexCoord1iARB(Uint32 ctx,GLenum target, GLint s);
	 void  glMultiTexCoord1ivARB(Uint32 ctx,GLenum target, const GLint *v);
	 void  glMultiTexCoord1sARB(Uint32 ctx,GLenum target, GLshort s);
	 void  glMultiTexCoord1svARB(Uint32 ctx,GLenum target, const GLshort *v);
	 void  glMultiTexCoord2dARB(Uint32 ctx,GLenum target, GLdouble s, GLdouble t);
	 void  glMultiTexCoord2dvARB(Uint32 ctx,GLenum target, const GLdouble *v);
	 void  glMultiTexCoord2fARB(Uint32 ctx,GLenum target, GLfloat s, GLfloat t);
	 void  glMultiTexCoord2fvARB(Uint32 ctx,GLenum target, const GLfloat *v);
	 void  glMultiTexCoord2iARB(Uint32 ctx,GLenum target, GLint s, GLint t);
	 void  glMultiTexCoord2ivARB(Uint32 ctx,GLenum target, const GLint *v);
	 void  glMultiTexCoord2sARB(Uint32 ctx,GLenum target, GLshort s, GLshort t);
	 void  glMultiTexCoord2svARB(Uint32 ctx,GLenum target, const GLshort *v);
	 void  glMultiTexCoord3dARB(Uint32 ctx,GLenum target, GLdouble s, GLdouble t, GLdouble r);
	 void  glMultiTexCoord3dvARB(Uint32 ctx,GLenum target, const GLdouble *v);
	 void  glMultiTexCoord3fARB(Uint32 ctx,GLenum target, GLfloat s, GLfloat t, GLfloat r);
	 void  glMultiTexCoord3fvARB(Uint32 ctx,GLenum target, const GLfloat *v);
	 void  glMultiTexCoord3iARB(Uint32 ctx,GLenum target, GLint s, GLint t, GLint r);
	 void  glMultiTexCoord3ivARB(Uint32 ctx,GLenum target, const GLint *v);
	 void  glMultiTexCoord3sARB(Uint32 ctx,GLenum target, GLshort s, GLshort t, GLshort r);
	 void  glMultiTexCoord3svARB(Uint32 ctx,GLenum target, const GLshort *v);
	 void  glMultiTexCoord4dARB(Uint32 ctx,GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	 void  glMultiTexCoord4dvARB(Uint32 ctx,GLenum target, const GLdouble *v);
	 void  glMultiTexCoord4fARB(Uint32 ctx,GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	 void  glMultiTexCoord4fvARB(Uint32 ctx,GLenum target, const GLfloat *v);
	 void  glMultiTexCoord4iARB(Uint32 ctx,GLenum target, GLint s, GLint t, GLint r, GLint q);
	 void  glMultiTexCoord4ivARB(Uint32 ctx,GLenum target, const GLint *v);
	 void  glMultiTexCoord4sARB(Uint32 ctx,GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	 void  glMultiTexCoord4svARB(Uint32 ctx,GLenum target, const GLshort *v);
*/
	 void  glEnableTraceMESA(Uint32 ctx, GLbitfield mask );
	 void  glDisableTraceMESA(Uint32 ctx, GLbitfield mask );
	 void  glNewTraceMESA(Uint32 ctx, GLbitfield mask, const GLubyte * traceName );
	 void  glEndTraceMESA(Uint32 ctx);
	 void  glTraceAssertAttribMESA(Uint32 ctx, GLbitfield attribMask );
	 void  glTraceCommentMESA(Uint32 ctx, const GLubyte * comment );
	 void  glTraceTextureMESA(Uint32 ctx, GLuint name, const GLubyte* comment );
	 void  glTraceListMESA(Uint32 ctx, GLuint name, const GLubyte* comment );
	 void  glTracePointerMESA(Uint32 ctx, GLvoid* pointer, const GLubyte* comment );
	 void  glTracePointerRangeMESA(Uint32 ctx, const GLvoid* first, const GLvoid* last, const GLubyte* comment );
	 void  glBlendEquationSeparateATI(Uint32 ctx, GLenum modeRGB, GLenum modeA );
/* Functions generated: 465 */
